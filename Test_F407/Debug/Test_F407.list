
Test_F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024b4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800263c  0800263c  0001263c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800264c  0800264c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800264c  0800264c  0001264c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002654  08002654  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002654  08002654  00012654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002658  08002658  00012658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800265c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000068  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000074  20000074  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00008307  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000014ce  00000000  00000000  00028386  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000950  00000000  00000000  00029858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000730  00000000  00000000  0002a1a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001fb09  00000000  00000000  0002a8d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00009b16  00000000  00000000  0004a3e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c4be9  00000000  00000000  00053ef7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000026d0  00000000  00000000  00118ae0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  0011b1b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002624 	.word	0x08002624

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002624 	.word	0x08002624

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ca:	f000 fa83 	bl	80009d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ce:	f000 f839 	bl	8000544 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d2:	f000 f959 	bl	8000788 <MX_GPIO_Init>
  MX_TIM1_Init();
 80004d6:	f000 f89f 	bl	8000618 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80004da:	2100      	movs	r1, #0
 80004dc:	4818      	ldr	r0, [pc, #96]	; (8000540 <main+0x7c>)
 80004de:	f001 fa39 	bl	8001954 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80004e2:	2104      	movs	r1, #4
 80004e4:	4816      	ldr	r0, [pc, #88]	; (8000540 <main+0x7c>)
 80004e6:	f001 fa35 	bl	8001954 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80004ea:	2108      	movs	r1, #8
 80004ec:	4814      	ldr	r0, [pc, #80]	; (8000540 <main+0x7c>)
 80004ee:	f001 fa31 	bl	8001954 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 4095);
 80004f2:	4b13      	ldr	r3, [pc, #76]	; (8000540 <main+0x7c>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	f640 72ff 	movw	r2, #4095	; 0xfff
 80004fa:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 80004fc:	4b10      	ldr	r3, [pc, #64]	; (8000540 <main+0x7c>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	2200      	movs	r2, #0
 8000502:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000504:	4b0e      	ldr	r3, [pc, #56]	; (8000540 <main+0x7c>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	2200      	movs	r2, #0
 800050a:	635a      	str	r2, [r3, #52]	; 0x34
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  for(uint16_t i = 0; i < 4096; i++){	// Apago 1
 800050c:	2300      	movs	r3, #0
 800050e:	80fb      	strh	r3, [r7, #6]
 8000510:	e006      	b.n	8000520 <main+0x5c>
	  		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, i);
 8000512:	4b0b      	ldr	r3, [pc, #44]	; (8000540 <main+0x7c>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	88fa      	ldrh	r2, [r7, #6]
 8000518:	635a      	str	r2, [r3, #52]	; 0x34
	  for(uint16_t i = 0; i < 4096; i++){	// Apago 1
 800051a:	88fb      	ldrh	r3, [r7, #6]
 800051c:	3301      	adds	r3, #1
 800051e:	80fb      	strh	r3, [r7, #6]
 8000520:	88fb      	ldrh	r3, [r7, #6]
 8000522:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000526:	d3f4      	bcc.n	8000512 <main+0x4e>
	  	  }

	  for(uint16_t i = 4095; i >= 0; i--){	// Prendo 2
 8000528:	f640 73ff 	movw	r3, #4095	; 0xfff
 800052c:	80bb      	strh	r3, [r7, #4]
	  		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, i);
 800052e:	4b04      	ldr	r3, [pc, #16]	; (8000540 <main+0x7c>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	88ba      	ldrh	r2, [r7, #4]
 8000534:	639a      	str	r2, [r3, #56]	; 0x38
	  for(uint16_t i = 4095; i >= 0; i--){	// Prendo 2
 8000536:	88bb      	ldrh	r3, [r7, #4]
 8000538:	3b01      	subs	r3, #1
 800053a:	80bb      	strh	r3, [r7, #4]
	  		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, i);
 800053c:	e7f7      	b.n	800052e <main+0x6a>
 800053e:	bf00      	nop
 8000540:	20000028 	.word	0x20000028

08000544 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b094      	sub	sp, #80	; 0x50
 8000548:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054a:	f107 0320 	add.w	r3, r7, #32
 800054e:	2230      	movs	r2, #48	; 0x30
 8000550:	2100      	movs	r1, #0
 8000552:	4618      	mov	r0, r3
 8000554:	f002 f83a 	bl	80025cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000558:	f107 030c 	add.w	r3, r7, #12
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
 8000560:	605a      	str	r2, [r3, #4]
 8000562:	609a      	str	r2, [r3, #8]
 8000564:	60da      	str	r2, [r3, #12]
 8000566:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000568:	2300      	movs	r3, #0
 800056a:	60bb      	str	r3, [r7, #8]
 800056c:	4b28      	ldr	r3, [pc, #160]	; (8000610 <SystemClock_Config+0xcc>)
 800056e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000570:	4a27      	ldr	r2, [pc, #156]	; (8000610 <SystemClock_Config+0xcc>)
 8000572:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000576:	6413      	str	r3, [r2, #64]	; 0x40
 8000578:	4b25      	ldr	r3, [pc, #148]	; (8000610 <SystemClock_Config+0xcc>)
 800057a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800057c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000580:	60bb      	str	r3, [r7, #8]
 8000582:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000584:	2300      	movs	r3, #0
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	4b22      	ldr	r3, [pc, #136]	; (8000614 <SystemClock_Config+0xd0>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a21      	ldr	r2, [pc, #132]	; (8000614 <SystemClock_Config+0xd0>)
 800058e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000592:	6013      	str	r3, [r2, #0]
 8000594:	4b1f      	ldr	r3, [pc, #124]	; (8000614 <SystemClock_Config+0xd0>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005a0:	2302      	movs	r3, #2
 80005a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a4:	2301      	movs	r3, #1
 80005a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a8:	2310      	movs	r3, #16
 80005aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ac:	2302      	movs	r3, #2
 80005ae:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005b0:	2300      	movs	r3, #0
 80005b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005b4:	2308      	movs	r3, #8
 80005b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005b8:	23a8      	movs	r3, #168	; 0xa8
 80005ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005bc:	2302      	movs	r3, #2
 80005be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005c0:	2304      	movs	r3, #4
 80005c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c4:	f107 0320 	add.w	r3, r7, #32
 80005c8:	4618      	mov	r0, r3
 80005ca:	f000 fcf7 	bl	8000fbc <HAL_RCC_OscConfig>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005d4:	f000 f90e 	bl	80007f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d8:	230f      	movs	r3, #15
 80005da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005dc:	2302      	movs	r3, #2
 80005de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e0:	2300      	movs	r3, #0
 80005e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005e4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005f0:	f107 030c 	add.w	r3, r7, #12
 80005f4:	2105      	movs	r1, #5
 80005f6:	4618      	mov	r0, r3
 80005f8:	f000 ff58 	bl	80014ac <HAL_RCC_ClockConfig>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000602:	f000 f8f7 	bl	80007f4 <Error_Handler>
  }
}
 8000606:	bf00      	nop
 8000608:	3750      	adds	r7, #80	; 0x50
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40023800 	.word	0x40023800
 8000614:	40007000 	.word	0x40007000

08000618 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b096      	sub	sp, #88	; 0x58
 800061c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800061e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	609a      	str	r2, [r3, #8]
 800062a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800062c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000636:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]
 8000644:	611a      	str	r2, [r3, #16]
 8000646:	615a      	str	r2, [r3, #20]
 8000648:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800064a:	1d3b      	adds	r3, r7, #4
 800064c:	2220      	movs	r2, #32
 800064e:	2100      	movs	r1, #0
 8000650:	4618      	mov	r0, r3
 8000652:	f001 ffbb 	bl	80025cc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000656:	4b4a      	ldr	r3, [pc, #296]	; (8000780 <MX_TIM1_Init+0x168>)
 8000658:	4a4a      	ldr	r2, [pc, #296]	; (8000784 <MX_TIM1_Init+0x16c>)
 800065a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800065c:	4b48      	ldr	r3, [pc, #288]	; (8000780 <MX_TIM1_Init+0x168>)
 800065e:	2200      	movs	r2, #0
 8000660:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000662:	4b47      	ldr	r3, [pc, #284]	; (8000780 <MX_TIM1_Init+0x168>)
 8000664:	2200      	movs	r2, #0
 8000666:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000668:	4b45      	ldr	r3, [pc, #276]	; (8000780 <MX_TIM1_Init+0x168>)
 800066a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800066e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000670:	4b43      	ldr	r3, [pc, #268]	; (8000780 <MX_TIM1_Init+0x168>)
 8000672:	2200      	movs	r2, #0
 8000674:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000676:	4b42      	ldr	r3, [pc, #264]	; (8000780 <MX_TIM1_Init+0x168>)
 8000678:	2200      	movs	r2, #0
 800067a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800067c:	4b40      	ldr	r3, [pc, #256]	; (8000780 <MX_TIM1_Init+0x168>)
 800067e:	2200      	movs	r2, #0
 8000680:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000682:	483f      	ldr	r0, [pc, #252]	; (8000780 <MX_TIM1_Init+0x168>)
 8000684:	f001 f8be 	bl	8001804 <HAL_TIM_Base_Init>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800068e:	f000 f8b1 	bl	80007f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000692:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000696:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000698:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800069c:	4619      	mov	r1, r3
 800069e:	4838      	ldr	r0, [pc, #224]	; (8000780 <MX_TIM1_Init+0x168>)
 80006a0:	f001 fae2 	bl	8001c68 <HAL_TIM_ConfigClockSource>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80006aa:	f000 f8a3 	bl	80007f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80006ae:	4834      	ldr	r0, [pc, #208]	; (8000780 <MX_TIM1_Init+0x168>)
 80006b0:	f001 f8f7 	bl	80018a2 <HAL_TIM_PWM_Init>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80006ba:	f000 f89b 	bl	80007f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006be:	2300      	movs	r3, #0
 80006c0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006c2:	2300      	movs	r3, #0
 80006c4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006c6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80006ca:	4619      	mov	r1, r3
 80006cc:	482c      	ldr	r0, [pc, #176]	; (8000780 <MX_TIM1_Init+0x168>)
 80006ce:	f001 feaf 	bl	8002430 <HAL_TIMEx_MasterConfigSynchronization>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80006d8:	f000 f88c 	bl	80007f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006dc:	2360      	movs	r3, #96	; 0x60
 80006de:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80006e0:	2300      	movs	r3, #0
 80006e2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006e4:	2300      	movs	r3, #0
 80006e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006e8:	2300      	movs	r3, #0
 80006ea:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006ec:	2300      	movs	r3, #0
 80006ee:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006f0:	2300      	movs	r3, #0
 80006f2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006f4:	2300      	movs	r3, #0
 80006f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006fc:	2200      	movs	r2, #0
 80006fe:	4619      	mov	r1, r3
 8000700:	481f      	ldr	r0, [pc, #124]	; (8000780 <MX_TIM1_Init+0x168>)
 8000702:	f001 f9ef 	bl	8001ae4 <HAL_TIM_PWM_ConfigChannel>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800070c:	f000 f872 	bl	80007f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000710:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000714:	2204      	movs	r2, #4
 8000716:	4619      	mov	r1, r3
 8000718:	4819      	ldr	r0, [pc, #100]	; (8000780 <MX_TIM1_Init+0x168>)
 800071a:	f001 f9e3 	bl	8001ae4 <HAL_TIM_PWM_ConfigChannel>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000724:	f000 f866 	bl	80007f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000728:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800072c:	2208      	movs	r2, #8
 800072e:	4619      	mov	r1, r3
 8000730:	4813      	ldr	r0, [pc, #76]	; (8000780 <MX_TIM1_Init+0x168>)
 8000732:	f001 f9d7 	bl	8001ae4 <HAL_TIM_PWM_ConfigChannel>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 800073c:	f000 f85a 	bl	80007f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000740:	2300      	movs	r3, #0
 8000742:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000744:	2300      	movs	r3, #0
 8000746:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000748:	2300      	movs	r3, #0
 800074a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800074c:	2300      	movs	r3, #0
 800074e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000754:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000758:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800075a:	2300      	movs	r3, #0
 800075c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800075e:	1d3b      	adds	r3, r7, #4
 8000760:	4619      	mov	r1, r3
 8000762:	4807      	ldr	r0, [pc, #28]	; (8000780 <MX_TIM1_Init+0x168>)
 8000764:	f001 fee0 	bl	8002528 <HAL_TIMEx_ConfigBreakDeadTime>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 800076e:	f000 f841 	bl	80007f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000772:	4803      	ldr	r0, [pc, #12]	; (8000780 <MX_TIM1_Init+0x168>)
 8000774:	f000 f88e 	bl	8000894 <HAL_TIM_MspPostInit>

}
 8000778:	bf00      	nop
 800077a:	3758      	adds	r7, #88	; 0x58
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	20000028 	.word	0x20000028
 8000784:	40010000 	.word	0x40010000

08000788 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000788:	b480      	push	{r7}
 800078a:	b085      	sub	sp, #20
 800078c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	4b17      	ldr	r3, [pc, #92]	; (80007f0 <MX_GPIO_Init+0x68>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a16      	ldr	r2, [pc, #88]	; (80007f0 <MX_GPIO_Init+0x68>)
 8000798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b14      	ldr	r3, [pc, #80]	; (80007f0 <MX_GPIO_Init+0x68>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	4b10      	ldr	r3, [pc, #64]	; (80007f0 <MX_GPIO_Init+0x68>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a0f      	ldr	r2, [pc, #60]	; (80007f0 <MX_GPIO_Init+0x68>)
 80007b4:	f043 0310 	orr.w	r3, r3, #16
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b0d      	ldr	r3, [pc, #52]	; (80007f0 <MX_GPIO_Init+0x68>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0310 	and.w	r3, r3, #16
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <MX_GPIO_Init+0x68>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a08      	ldr	r2, [pc, #32]	; (80007f0 <MX_GPIO_Init+0x68>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <MX_GPIO_Init+0x68>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007e2:	bf00      	nop
 80007e4:	3714      	adds	r7, #20
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	40023800 	.word	0x40023800

080007f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f8:	b672      	cpsid	i
}
 80007fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007fc:	e7fe      	b.n	80007fc <Error_Handler+0x8>
	...

08000800 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	4b10      	ldr	r3, [pc, #64]	; (800084c <HAL_MspInit+0x4c>)
 800080c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800080e:	4a0f      	ldr	r2, [pc, #60]	; (800084c <HAL_MspInit+0x4c>)
 8000810:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000814:	6453      	str	r3, [r2, #68]	; 0x44
 8000816:	4b0d      	ldr	r3, [pc, #52]	; (800084c <HAL_MspInit+0x4c>)
 8000818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800081a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	603b      	str	r3, [r7, #0]
 8000826:	4b09      	ldr	r3, [pc, #36]	; (800084c <HAL_MspInit+0x4c>)
 8000828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082a:	4a08      	ldr	r2, [pc, #32]	; (800084c <HAL_MspInit+0x4c>)
 800082c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000830:	6413      	str	r3, [r2, #64]	; 0x40
 8000832:	4b06      	ldr	r3, [pc, #24]	; (800084c <HAL_MspInit+0x4c>)
 8000834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800083a:	603b      	str	r3, [r7, #0]
 800083c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800083e:	bf00      	nop
 8000840:	370c      	adds	r7, #12
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	40023800 	.word	0x40023800

08000850 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000850:	b480      	push	{r7}
 8000852:	b085      	sub	sp, #20
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a0b      	ldr	r2, [pc, #44]	; (800088c <HAL_TIM_Base_MspInit+0x3c>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d10d      	bne.n	800087e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	60fb      	str	r3, [r7, #12]
 8000866:	4b0a      	ldr	r3, [pc, #40]	; (8000890 <HAL_TIM_Base_MspInit+0x40>)
 8000868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800086a:	4a09      	ldr	r2, [pc, #36]	; (8000890 <HAL_TIM_Base_MspInit+0x40>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6453      	str	r3, [r2, #68]	; 0x44
 8000872:	4b07      	ldr	r3, [pc, #28]	; (8000890 <HAL_TIM_Base_MspInit+0x40>)
 8000874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800087e:	bf00      	nop
 8000880:	3714      	adds	r7, #20
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	40010000 	.word	0x40010000
 8000890:	40023800 	.word	0x40023800

08000894 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b088      	sub	sp, #32
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089c:	f107 030c 	add.w	r3, r7, #12
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]
 80008aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a12      	ldr	r2, [pc, #72]	; (80008fc <HAL_TIM_MspPostInit+0x68>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d11e      	bne.n	80008f4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	60bb      	str	r3, [r7, #8]
 80008ba:	4b11      	ldr	r3, [pc, #68]	; (8000900 <HAL_TIM_MspPostInit+0x6c>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a10      	ldr	r2, [pc, #64]	; (8000900 <HAL_TIM_MspPostInit+0x6c>)
 80008c0:	f043 0310 	orr.w	r3, r3, #16
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <HAL_TIM_MspPostInit+0x6c>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0310 	and.w	r3, r3, #16
 80008ce:	60bb      	str	r3, [r7, #8]
 80008d0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 80008d2:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 80008d6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d8:	2302      	movs	r3, #2
 80008da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008dc:	2302      	movs	r3, #2
 80008de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e0:	2300      	movs	r3, #0
 80008e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80008e4:	2301      	movs	r3, #1
 80008e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008e8:	f107 030c 	add.w	r3, r7, #12
 80008ec:	4619      	mov	r1, r3
 80008ee:	4805      	ldr	r0, [pc, #20]	; (8000904 <HAL_TIM_MspPostInit+0x70>)
 80008f0:	f000 f9c8 	bl	8000c84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80008f4:	bf00      	nop
 80008f6:	3720      	adds	r7, #32
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	40010000 	.word	0x40010000
 8000900:	40023800 	.word	0x40023800
 8000904:	40021000 	.word	0x40021000

08000908 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800090c:	e7fe      	b.n	800090c <NMI_Handler+0x4>

0800090e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000912:	e7fe      	b.n	8000912 <HardFault_Handler+0x4>

08000914 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000918:	e7fe      	b.n	8000918 <MemManage_Handler+0x4>

0800091a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800091e:	e7fe      	b.n	800091e <BusFault_Handler+0x4>

08000920 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000924:	e7fe      	b.n	8000924 <UsageFault_Handler+0x4>

08000926 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800092a:	bf00      	nop
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr

08000934 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000938:	bf00      	nop
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr

08000942 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr

08000950 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000954:	f000 f890 	bl	8000a78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}

0800095c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000960:	4b06      	ldr	r3, [pc, #24]	; (800097c <SystemInit+0x20>)
 8000962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000966:	4a05      	ldr	r2, [pc, #20]	; (800097c <SystemInit+0x20>)
 8000968:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800096c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	e000ed00 	.word	0xe000ed00

08000980 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000980:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009b8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000984:	f7ff ffea 	bl	800095c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000988:	480c      	ldr	r0, [pc, #48]	; (80009bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800098a:	490d      	ldr	r1, [pc, #52]	; (80009c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800098c:	4a0d      	ldr	r2, [pc, #52]	; (80009c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800098e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000990:	e002      	b.n	8000998 <LoopCopyDataInit>

08000992 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000992:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000994:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000996:	3304      	adds	r3, #4

08000998 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000998:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800099a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800099c:	d3f9      	bcc.n	8000992 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800099e:	4a0a      	ldr	r2, [pc, #40]	; (80009c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009a0:	4c0a      	ldr	r4, [pc, #40]	; (80009cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80009a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a4:	e001      	b.n	80009aa <LoopFillZerobss>

080009a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a8:	3204      	adds	r2, #4

080009aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009ac:	d3fb      	bcc.n	80009a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009ae:	f001 fe15 	bl	80025dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009b2:	f7ff fd87 	bl	80004c4 <main>
  bx  lr    
 80009b6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80009b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009c0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009c4:	0800265c 	.word	0x0800265c
  ldr r2, =_sbss
 80009c8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009cc:	20000074 	.word	0x20000074

080009d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009d0:	e7fe      	b.n	80009d0 <ADC_IRQHandler>
	...

080009d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009d8:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <HAL_Init+0x40>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a0d      	ldr	r2, [pc, #52]	; (8000a14 <HAL_Init+0x40>)
 80009de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009e4:	4b0b      	ldr	r3, [pc, #44]	; (8000a14 <HAL_Init+0x40>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a0a      	ldr	r2, [pc, #40]	; (8000a14 <HAL_Init+0x40>)
 80009ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009f0:	4b08      	ldr	r3, [pc, #32]	; (8000a14 <HAL_Init+0x40>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a07      	ldr	r2, [pc, #28]	; (8000a14 <HAL_Init+0x40>)
 80009f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009fc:	2003      	movs	r0, #3
 80009fe:	f000 f90d 	bl	8000c1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a02:	200f      	movs	r0, #15
 8000a04:	f000 f808 	bl	8000a18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a08:	f7ff fefa 	bl	8000800 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a0c:	2300      	movs	r3, #0
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40023c00 	.word	0x40023c00

08000a18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a20:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <HAL_InitTick+0x54>)
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <HAL_InitTick+0x58>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	4619      	mov	r1, r3
 8000a2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a36:	4618      	mov	r0, r3
 8000a38:	f000 f917 	bl	8000c6a <HAL_SYSTICK_Config>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a42:	2301      	movs	r3, #1
 8000a44:	e00e      	b.n	8000a64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	2b0f      	cmp	r3, #15
 8000a4a:	d80a      	bhi.n	8000a62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	6879      	ldr	r1, [r7, #4]
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a54:	f000 f8ed 	bl	8000c32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a58:	4a06      	ldr	r2, [pc, #24]	; (8000a74 <HAL_InitTick+0x5c>)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	e000      	b.n	8000a64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a62:	2301      	movs	r3, #1
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	20000000 	.word	0x20000000
 8000a70:	20000008 	.word	0x20000008
 8000a74:	20000004 	.word	0x20000004

08000a78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a7c:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <HAL_IncTick+0x20>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	461a      	mov	r2, r3
 8000a82:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <HAL_IncTick+0x24>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4413      	add	r3, r2
 8000a88:	4a04      	ldr	r2, [pc, #16]	; (8000a9c <HAL_IncTick+0x24>)
 8000a8a:	6013      	str	r3, [r2, #0]
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	20000008 	.word	0x20000008
 8000a9c:	20000070 	.word	0x20000070

08000aa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  return uwTick;
 8000aa4:	4b03      	ldr	r3, [pc, #12]	; (8000ab4 <HAL_GetTick+0x14>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	20000070 	.word	0x20000070

08000ab8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b085      	sub	sp, #20
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	f003 0307 	and.w	r3, r3, #7
 8000ac6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ac8:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <__NVIC_SetPriorityGrouping+0x44>)
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ace:	68ba      	ldr	r2, [r7, #8]
 8000ad0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ae0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ae8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aea:	4a04      	ldr	r2, [pc, #16]	; (8000afc <__NVIC_SetPriorityGrouping+0x44>)
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	60d3      	str	r3, [r2, #12]
}
 8000af0:	bf00      	nop
 8000af2:	3714      	adds	r7, #20
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b04:	4b04      	ldr	r3, [pc, #16]	; (8000b18 <__NVIC_GetPriorityGrouping+0x18>)
 8000b06:	68db      	ldr	r3, [r3, #12]
 8000b08:	0a1b      	lsrs	r3, r3, #8
 8000b0a:	f003 0307 	and.w	r3, r3, #7
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr
 8000b18:	e000ed00 	.word	0xe000ed00

08000b1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	6039      	str	r1, [r7, #0]
 8000b26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	db0a      	blt.n	8000b46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	b2da      	uxtb	r2, r3
 8000b34:	490c      	ldr	r1, [pc, #48]	; (8000b68 <__NVIC_SetPriority+0x4c>)
 8000b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3a:	0112      	lsls	r2, r2, #4
 8000b3c:	b2d2      	uxtb	r2, r2
 8000b3e:	440b      	add	r3, r1
 8000b40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b44:	e00a      	b.n	8000b5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	b2da      	uxtb	r2, r3
 8000b4a:	4908      	ldr	r1, [pc, #32]	; (8000b6c <__NVIC_SetPriority+0x50>)
 8000b4c:	79fb      	ldrb	r3, [r7, #7]
 8000b4e:	f003 030f 	and.w	r3, r3, #15
 8000b52:	3b04      	subs	r3, #4
 8000b54:	0112      	lsls	r2, r2, #4
 8000b56:	b2d2      	uxtb	r2, r2
 8000b58:	440b      	add	r3, r1
 8000b5a:	761a      	strb	r2, [r3, #24]
}
 8000b5c:	bf00      	nop
 8000b5e:	370c      	adds	r7, #12
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	e000e100 	.word	0xe000e100
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b089      	sub	sp, #36	; 0x24
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	60f8      	str	r0, [r7, #12]
 8000b78:	60b9      	str	r1, [r7, #8]
 8000b7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	f003 0307 	and.w	r3, r3, #7
 8000b82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b84:	69fb      	ldr	r3, [r7, #28]
 8000b86:	f1c3 0307 	rsb	r3, r3, #7
 8000b8a:	2b04      	cmp	r3, #4
 8000b8c:	bf28      	it	cs
 8000b8e:	2304      	movcs	r3, #4
 8000b90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	3304      	adds	r3, #4
 8000b96:	2b06      	cmp	r3, #6
 8000b98:	d902      	bls.n	8000ba0 <NVIC_EncodePriority+0x30>
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	3b03      	subs	r3, #3
 8000b9e:	e000      	b.n	8000ba2 <NVIC_EncodePriority+0x32>
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ba8:	69bb      	ldr	r3, [r7, #24]
 8000baa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bae:	43da      	mvns	r2, r3
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	401a      	ands	r2, r3
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bb8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc2:	43d9      	mvns	r1, r3
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc8:	4313      	orrs	r3, r2
         );
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3724      	adds	r7, #36	; 0x24
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
	...

08000bd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	3b01      	subs	r3, #1
 8000be4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000be8:	d301      	bcc.n	8000bee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bea:	2301      	movs	r3, #1
 8000bec:	e00f      	b.n	8000c0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bee:	4a0a      	ldr	r2, [pc, #40]	; (8000c18 <SysTick_Config+0x40>)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	3b01      	subs	r3, #1
 8000bf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bf6:	210f      	movs	r1, #15
 8000bf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bfc:	f7ff ff8e 	bl	8000b1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c00:	4b05      	ldr	r3, [pc, #20]	; (8000c18 <SysTick_Config+0x40>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c06:	4b04      	ldr	r3, [pc, #16]	; (8000c18 <SysTick_Config+0x40>)
 8000c08:	2207      	movs	r2, #7
 8000c0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c0c:	2300      	movs	r3, #0
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	e000e010 	.word	0xe000e010

08000c1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c24:	6878      	ldr	r0, [r7, #4]
 8000c26:	f7ff ff47 	bl	8000ab8 <__NVIC_SetPriorityGrouping>
}
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b086      	sub	sp, #24
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	4603      	mov	r3, r0
 8000c3a:	60b9      	str	r1, [r7, #8]
 8000c3c:	607a      	str	r2, [r7, #4]
 8000c3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c44:	f7ff ff5c 	bl	8000b00 <__NVIC_GetPriorityGrouping>
 8000c48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c4a:	687a      	ldr	r2, [r7, #4]
 8000c4c:	68b9      	ldr	r1, [r7, #8]
 8000c4e:	6978      	ldr	r0, [r7, #20]
 8000c50:	f7ff ff8e 	bl	8000b70 <NVIC_EncodePriority>
 8000c54:	4602      	mov	r2, r0
 8000c56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c5a:	4611      	mov	r1, r2
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff ff5d 	bl	8000b1c <__NVIC_SetPriority>
}
 8000c62:	bf00      	nop
 8000c64:	3718      	adds	r7, #24
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b082      	sub	sp, #8
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c72:	6878      	ldr	r0, [r7, #4]
 8000c74:	f7ff ffb0 	bl	8000bd8 <SysTick_Config>
 8000c78:	4603      	mov	r3, r0
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
	...

08000c84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b089      	sub	sp, #36	; 0x24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
 8000c8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c92:	2300      	movs	r3, #0
 8000c94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c96:	2300      	movs	r3, #0
 8000c98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	61fb      	str	r3, [r7, #28]
 8000c9e:	e16b      	b.n	8000f78 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	69fb      	ldr	r3, [r7, #28]
 8000ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	697a      	ldr	r2, [r7, #20]
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cb4:	693a      	ldr	r2, [r7, #16]
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	f040 815a 	bne.w	8000f72 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	f003 0303 	and.w	r3, r3, #3
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d005      	beq.n	8000cd6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cd2:	2b02      	cmp	r3, #2
 8000cd4:	d130      	bne.n	8000d38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	689b      	ldr	r3, [r3, #8]
 8000cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	005b      	lsls	r3, r3, #1
 8000ce0:	2203      	movs	r2, #3
 8000ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce6:	43db      	mvns	r3, r3
 8000ce8:	69ba      	ldr	r2, [r7, #24]
 8000cea:	4013      	ands	r3, r2
 8000cec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	68da      	ldr	r2, [r3, #12]
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfa:	69ba      	ldr	r2, [r7, #24]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	69ba      	ldr	r2, [r7, #24]
 8000d04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	fa02 f303 	lsl.w	r3, r2, r3
 8000d14:	43db      	mvns	r3, r3
 8000d16:	69ba      	ldr	r2, [r7, #24]
 8000d18:	4013      	ands	r3, r2
 8000d1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	091b      	lsrs	r3, r3, #4
 8000d22:	f003 0201 	and.w	r2, r3, #1
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2c:	69ba      	ldr	r2, [r7, #24]
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	69ba      	ldr	r2, [r7, #24]
 8000d36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	f003 0303 	and.w	r3, r3, #3
 8000d40:	2b03      	cmp	r3, #3
 8000d42:	d017      	beq.n	8000d74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	005b      	lsls	r3, r3, #1
 8000d4e:	2203      	movs	r2, #3
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	43db      	mvns	r3, r3
 8000d56:	69ba      	ldr	r2, [r7, #24]
 8000d58:	4013      	ands	r3, r2
 8000d5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	689a      	ldr	r2, [r3, #8]
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	69ba      	ldr	r2, [r7, #24]
 8000d72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f003 0303 	and.w	r3, r3, #3
 8000d7c:	2b02      	cmp	r3, #2
 8000d7e:	d123      	bne.n	8000dc8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	08da      	lsrs	r2, r3, #3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	3208      	adds	r2, #8
 8000d88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	f003 0307 	and.w	r3, r3, #7
 8000d94:	009b      	lsls	r3, r3, #2
 8000d96:	220f      	movs	r2, #15
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	43db      	mvns	r3, r3
 8000d9e:	69ba      	ldr	r2, [r7, #24]
 8000da0:	4013      	ands	r3, r2
 8000da2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	691a      	ldr	r2, [r3, #16]
 8000da8:	69fb      	ldr	r3, [r7, #28]
 8000daa:	f003 0307 	and.w	r3, r3, #7
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	fa02 f303 	lsl.w	r3, r2, r3
 8000db4:	69ba      	ldr	r2, [r7, #24]
 8000db6:	4313      	orrs	r3, r2
 8000db8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	08da      	lsrs	r2, r3, #3
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	3208      	adds	r2, #8
 8000dc2:	69b9      	ldr	r1, [r7, #24]
 8000dc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	2203      	movs	r2, #3
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	43db      	mvns	r3, r3
 8000dda:	69ba      	ldr	r2, [r7, #24]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f003 0203 	and.w	r2, r3, #3
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	69ba      	ldr	r2, [r7, #24]
 8000dfa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	f000 80b4 	beq.w	8000f72 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	4b60      	ldr	r3, [pc, #384]	; (8000f90 <HAL_GPIO_Init+0x30c>)
 8000e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e12:	4a5f      	ldr	r2, [pc, #380]	; (8000f90 <HAL_GPIO_Init+0x30c>)
 8000e14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e18:	6453      	str	r3, [r2, #68]	; 0x44
 8000e1a:	4b5d      	ldr	r3, [pc, #372]	; (8000f90 <HAL_GPIO_Init+0x30c>)
 8000e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e26:	4a5b      	ldr	r2, [pc, #364]	; (8000f94 <HAL_GPIO_Init+0x310>)
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	089b      	lsrs	r3, r3, #2
 8000e2c:	3302      	adds	r3, #2
 8000e2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	f003 0303 	and.w	r3, r3, #3
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	220f      	movs	r2, #15
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	43db      	mvns	r3, r3
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	4013      	ands	r3, r2
 8000e48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a52      	ldr	r2, [pc, #328]	; (8000f98 <HAL_GPIO_Init+0x314>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d02b      	beq.n	8000eaa <HAL_GPIO_Init+0x226>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4a51      	ldr	r2, [pc, #324]	; (8000f9c <HAL_GPIO_Init+0x318>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d025      	beq.n	8000ea6 <HAL_GPIO_Init+0x222>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4a50      	ldr	r2, [pc, #320]	; (8000fa0 <HAL_GPIO_Init+0x31c>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d01f      	beq.n	8000ea2 <HAL_GPIO_Init+0x21e>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4a4f      	ldr	r2, [pc, #316]	; (8000fa4 <HAL_GPIO_Init+0x320>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d019      	beq.n	8000e9e <HAL_GPIO_Init+0x21a>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4a4e      	ldr	r2, [pc, #312]	; (8000fa8 <HAL_GPIO_Init+0x324>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d013      	beq.n	8000e9a <HAL_GPIO_Init+0x216>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a4d      	ldr	r2, [pc, #308]	; (8000fac <HAL_GPIO_Init+0x328>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d00d      	beq.n	8000e96 <HAL_GPIO_Init+0x212>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4a4c      	ldr	r2, [pc, #304]	; (8000fb0 <HAL_GPIO_Init+0x32c>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d007      	beq.n	8000e92 <HAL_GPIO_Init+0x20e>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a4b      	ldr	r2, [pc, #300]	; (8000fb4 <HAL_GPIO_Init+0x330>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d101      	bne.n	8000e8e <HAL_GPIO_Init+0x20a>
 8000e8a:	2307      	movs	r3, #7
 8000e8c:	e00e      	b.n	8000eac <HAL_GPIO_Init+0x228>
 8000e8e:	2308      	movs	r3, #8
 8000e90:	e00c      	b.n	8000eac <HAL_GPIO_Init+0x228>
 8000e92:	2306      	movs	r3, #6
 8000e94:	e00a      	b.n	8000eac <HAL_GPIO_Init+0x228>
 8000e96:	2305      	movs	r3, #5
 8000e98:	e008      	b.n	8000eac <HAL_GPIO_Init+0x228>
 8000e9a:	2304      	movs	r3, #4
 8000e9c:	e006      	b.n	8000eac <HAL_GPIO_Init+0x228>
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	e004      	b.n	8000eac <HAL_GPIO_Init+0x228>
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	e002      	b.n	8000eac <HAL_GPIO_Init+0x228>
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e000      	b.n	8000eac <HAL_GPIO_Init+0x228>
 8000eaa:	2300      	movs	r3, #0
 8000eac:	69fa      	ldr	r2, [r7, #28]
 8000eae:	f002 0203 	and.w	r2, r2, #3
 8000eb2:	0092      	lsls	r2, r2, #2
 8000eb4:	4093      	lsls	r3, r2
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ebc:	4935      	ldr	r1, [pc, #212]	; (8000f94 <HAL_GPIO_Init+0x310>)
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	089b      	lsrs	r3, r3, #2
 8000ec2:	3302      	adds	r3, #2
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000eca:	4b3b      	ldr	r3, [pc, #236]	; (8000fb8 <HAL_GPIO_Init+0x334>)
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	43db      	mvns	r3, r3
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d003      	beq.n	8000eee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000eee:	4a32      	ldr	r2, [pc, #200]	; (8000fb8 <HAL_GPIO_Init+0x334>)
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ef4:	4b30      	ldr	r3, [pc, #192]	; (8000fb8 <HAL_GPIO_Init+0x334>)
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	43db      	mvns	r3, r3
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	4013      	ands	r3, r2
 8000f02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d003      	beq.n	8000f18 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f18:	4a27      	ldr	r2, [pc, #156]	; (8000fb8 <HAL_GPIO_Init+0x334>)
 8000f1a:	69bb      	ldr	r3, [r7, #24]
 8000f1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f1e:	4b26      	ldr	r3, [pc, #152]	; (8000fb8 <HAL_GPIO_Init+0x334>)
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	43db      	mvns	r3, r3
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d003      	beq.n	8000f42 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f42:	4a1d      	ldr	r2, [pc, #116]	; (8000fb8 <HAL_GPIO_Init+0x334>)
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f48:	4b1b      	ldr	r3, [pc, #108]	; (8000fb8 <HAL_GPIO_Init+0x334>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	43db      	mvns	r3, r3
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	4013      	ands	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d003      	beq.n	8000f6c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f6c:	4a12      	ldr	r2, [pc, #72]	; (8000fb8 <HAL_GPIO_Init+0x334>)
 8000f6e:	69bb      	ldr	r3, [r7, #24]
 8000f70:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	3301      	adds	r3, #1
 8000f76:	61fb      	str	r3, [r7, #28]
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	2b0f      	cmp	r3, #15
 8000f7c:	f67f ae90 	bls.w	8000ca0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f80:	bf00      	nop
 8000f82:	bf00      	nop
 8000f84:	3724      	adds	r7, #36	; 0x24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	40023800 	.word	0x40023800
 8000f94:	40013800 	.word	0x40013800
 8000f98:	40020000 	.word	0x40020000
 8000f9c:	40020400 	.word	0x40020400
 8000fa0:	40020800 	.word	0x40020800
 8000fa4:	40020c00 	.word	0x40020c00
 8000fa8:	40021000 	.word	0x40021000
 8000fac:	40021400 	.word	0x40021400
 8000fb0:	40021800 	.word	0x40021800
 8000fb4:	40021c00 	.word	0x40021c00
 8000fb8:	40013c00 	.word	0x40013c00

08000fbc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d101      	bne.n	8000fce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e267      	b.n	800149e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d075      	beq.n	80010c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000fda:	4b88      	ldr	r3, [pc, #544]	; (80011fc <HAL_RCC_OscConfig+0x240>)
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	f003 030c 	and.w	r3, r3, #12
 8000fe2:	2b04      	cmp	r3, #4
 8000fe4:	d00c      	beq.n	8001000 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fe6:	4b85      	ldr	r3, [pc, #532]	; (80011fc <HAL_RCC_OscConfig+0x240>)
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000fee:	2b08      	cmp	r3, #8
 8000ff0:	d112      	bne.n	8001018 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ff2:	4b82      	ldr	r3, [pc, #520]	; (80011fc <HAL_RCC_OscConfig+0x240>)
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ffa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000ffe:	d10b      	bne.n	8001018 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001000:	4b7e      	ldr	r3, [pc, #504]	; (80011fc <HAL_RCC_OscConfig+0x240>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001008:	2b00      	cmp	r3, #0
 800100a:	d05b      	beq.n	80010c4 <HAL_RCC_OscConfig+0x108>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d157      	bne.n	80010c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001014:	2301      	movs	r3, #1
 8001016:	e242      	b.n	800149e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001020:	d106      	bne.n	8001030 <HAL_RCC_OscConfig+0x74>
 8001022:	4b76      	ldr	r3, [pc, #472]	; (80011fc <HAL_RCC_OscConfig+0x240>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a75      	ldr	r2, [pc, #468]	; (80011fc <HAL_RCC_OscConfig+0x240>)
 8001028:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800102c:	6013      	str	r3, [r2, #0]
 800102e:	e01d      	b.n	800106c <HAL_RCC_OscConfig+0xb0>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001038:	d10c      	bne.n	8001054 <HAL_RCC_OscConfig+0x98>
 800103a:	4b70      	ldr	r3, [pc, #448]	; (80011fc <HAL_RCC_OscConfig+0x240>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a6f      	ldr	r2, [pc, #444]	; (80011fc <HAL_RCC_OscConfig+0x240>)
 8001040:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001044:	6013      	str	r3, [r2, #0]
 8001046:	4b6d      	ldr	r3, [pc, #436]	; (80011fc <HAL_RCC_OscConfig+0x240>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a6c      	ldr	r2, [pc, #432]	; (80011fc <HAL_RCC_OscConfig+0x240>)
 800104c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001050:	6013      	str	r3, [r2, #0]
 8001052:	e00b      	b.n	800106c <HAL_RCC_OscConfig+0xb0>
 8001054:	4b69      	ldr	r3, [pc, #420]	; (80011fc <HAL_RCC_OscConfig+0x240>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a68      	ldr	r2, [pc, #416]	; (80011fc <HAL_RCC_OscConfig+0x240>)
 800105a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800105e:	6013      	str	r3, [r2, #0]
 8001060:	4b66      	ldr	r3, [pc, #408]	; (80011fc <HAL_RCC_OscConfig+0x240>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a65      	ldr	r2, [pc, #404]	; (80011fc <HAL_RCC_OscConfig+0x240>)
 8001066:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800106a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d013      	beq.n	800109c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001074:	f7ff fd14 	bl	8000aa0 <HAL_GetTick>
 8001078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800107a:	e008      	b.n	800108e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800107c:	f7ff fd10 	bl	8000aa0 <HAL_GetTick>
 8001080:	4602      	mov	r2, r0
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	2b64      	cmp	r3, #100	; 0x64
 8001088:	d901      	bls.n	800108e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800108a:	2303      	movs	r3, #3
 800108c:	e207      	b.n	800149e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800108e:	4b5b      	ldr	r3, [pc, #364]	; (80011fc <HAL_RCC_OscConfig+0x240>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001096:	2b00      	cmp	r3, #0
 8001098:	d0f0      	beq.n	800107c <HAL_RCC_OscConfig+0xc0>
 800109a:	e014      	b.n	80010c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800109c:	f7ff fd00 	bl	8000aa0 <HAL_GetTick>
 80010a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010a2:	e008      	b.n	80010b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010a4:	f7ff fcfc 	bl	8000aa0 <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	2b64      	cmp	r3, #100	; 0x64
 80010b0:	d901      	bls.n	80010b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80010b2:	2303      	movs	r3, #3
 80010b4:	e1f3      	b.n	800149e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010b6:	4b51      	ldr	r3, [pc, #324]	; (80011fc <HAL_RCC_OscConfig+0x240>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d1f0      	bne.n	80010a4 <HAL_RCC_OscConfig+0xe8>
 80010c2:	e000      	b.n	80010c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f003 0302 	and.w	r3, r3, #2
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d063      	beq.n	800119a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80010d2:	4b4a      	ldr	r3, [pc, #296]	; (80011fc <HAL_RCC_OscConfig+0x240>)
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	f003 030c 	and.w	r3, r3, #12
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d00b      	beq.n	80010f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010de:	4b47      	ldr	r3, [pc, #284]	; (80011fc <HAL_RCC_OscConfig+0x240>)
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80010e6:	2b08      	cmp	r3, #8
 80010e8:	d11c      	bne.n	8001124 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010ea:	4b44      	ldr	r3, [pc, #272]	; (80011fc <HAL_RCC_OscConfig+0x240>)
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d116      	bne.n	8001124 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010f6:	4b41      	ldr	r3, [pc, #260]	; (80011fc <HAL_RCC_OscConfig+0x240>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f003 0302 	and.w	r3, r3, #2
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d005      	beq.n	800110e <HAL_RCC_OscConfig+0x152>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	68db      	ldr	r3, [r3, #12]
 8001106:	2b01      	cmp	r3, #1
 8001108:	d001      	beq.n	800110e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e1c7      	b.n	800149e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800110e:	4b3b      	ldr	r3, [pc, #236]	; (80011fc <HAL_RCC_OscConfig+0x240>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	691b      	ldr	r3, [r3, #16]
 800111a:	00db      	lsls	r3, r3, #3
 800111c:	4937      	ldr	r1, [pc, #220]	; (80011fc <HAL_RCC_OscConfig+0x240>)
 800111e:	4313      	orrs	r3, r2
 8001120:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001122:	e03a      	b.n	800119a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d020      	beq.n	800116e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800112c:	4b34      	ldr	r3, [pc, #208]	; (8001200 <HAL_RCC_OscConfig+0x244>)
 800112e:	2201      	movs	r2, #1
 8001130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001132:	f7ff fcb5 	bl	8000aa0 <HAL_GetTick>
 8001136:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001138:	e008      	b.n	800114c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800113a:	f7ff fcb1 	bl	8000aa0 <HAL_GetTick>
 800113e:	4602      	mov	r2, r0
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	1ad3      	subs	r3, r2, r3
 8001144:	2b02      	cmp	r3, #2
 8001146:	d901      	bls.n	800114c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001148:	2303      	movs	r3, #3
 800114a:	e1a8      	b.n	800149e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800114c:	4b2b      	ldr	r3, [pc, #172]	; (80011fc <HAL_RCC_OscConfig+0x240>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f003 0302 	and.w	r3, r3, #2
 8001154:	2b00      	cmp	r3, #0
 8001156:	d0f0      	beq.n	800113a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001158:	4b28      	ldr	r3, [pc, #160]	; (80011fc <HAL_RCC_OscConfig+0x240>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	691b      	ldr	r3, [r3, #16]
 8001164:	00db      	lsls	r3, r3, #3
 8001166:	4925      	ldr	r1, [pc, #148]	; (80011fc <HAL_RCC_OscConfig+0x240>)
 8001168:	4313      	orrs	r3, r2
 800116a:	600b      	str	r3, [r1, #0]
 800116c:	e015      	b.n	800119a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800116e:	4b24      	ldr	r3, [pc, #144]	; (8001200 <HAL_RCC_OscConfig+0x244>)
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001174:	f7ff fc94 	bl	8000aa0 <HAL_GetTick>
 8001178:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800117a:	e008      	b.n	800118e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800117c:	f7ff fc90 	bl	8000aa0 <HAL_GetTick>
 8001180:	4602      	mov	r2, r0
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	2b02      	cmp	r3, #2
 8001188:	d901      	bls.n	800118e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800118a:	2303      	movs	r3, #3
 800118c:	e187      	b.n	800149e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800118e:	4b1b      	ldr	r3, [pc, #108]	; (80011fc <HAL_RCC_OscConfig+0x240>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 0302 	and.w	r3, r3, #2
 8001196:	2b00      	cmp	r3, #0
 8001198:	d1f0      	bne.n	800117c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 0308 	and.w	r3, r3, #8
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d036      	beq.n	8001214 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	695b      	ldr	r3, [r3, #20]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d016      	beq.n	80011dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011ae:	4b15      	ldr	r3, [pc, #84]	; (8001204 <HAL_RCC_OscConfig+0x248>)
 80011b0:	2201      	movs	r2, #1
 80011b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011b4:	f7ff fc74 	bl	8000aa0 <HAL_GetTick>
 80011b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011ba:	e008      	b.n	80011ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011bc:	f7ff fc70 	bl	8000aa0 <HAL_GetTick>
 80011c0:	4602      	mov	r2, r0
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d901      	bls.n	80011ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	e167      	b.n	800149e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011ce:	4b0b      	ldr	r3, [pc, #44]	; (80011fc <HAL_RCC_OscConfig+0x240>)
 80011d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d0f0      	beq.n	80011bc <HAL_RCC_OscConfig+0x200>
 80011da:	e01b      	b.n	8001214 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011dc:	4b09      	ldr	r3, [pc, #36]	; (8001204 <HAL_RCC_OscConfig+0x248>)
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011e2:	f7ff fc5d 	bl	8000aa0 <HAL_GetTick>
 80011e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011e8:	e00e      	b.n	8001208 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011ea:	f7ff fc59 	bl	8000aa0 <HAL_GetTick>
 80011ee:	4602      	mov	r2, r0
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	1ad3      	subs	r3, r2, r3
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d907      	bls.n	8001208 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80011f8:	2303      	movs	r3, #3
 80011fa:	e150      	b.n	800149e <HAL_RCC_OscConfig+0x4e2>
 80011fc:	40023800 	.word	0x40023800
 8001200:	42470000 	.word	0x42470000
 8001204:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001208:	4b88      	ldr	r3, [pc, #544]	; (800142c <HAL_RCC_OscConfig+0x470>)
 800120a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800120c:	f003 0302 	and.w	r3, r3, #2
 8001210:	2b00      	cmp	r3, #0
 8001212:	d1ea      	bne.n	80011ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f003 0304 	and.w	r3, r3, #4
 800121c:	2b00      	cmp	r3, #0
 800121e:	f000 8097 	beq.w	8001350 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001222:	2300      	movs	r3, #0
 8001224:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001226:	4b81      	ldr	r3, [pc, #516]	; (800142c <HAL_RCC_OscConfig+0x470>)
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d10f      	bne.n	8001252 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	60bb      	str	r3, [r7, #8]
 8001236:	4b7d      	ldr	r3, [pc, #500]	; (800142c <HAL_RCC_OscConfig+0x470>)
 8001238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123a:	4a7c      	ldr	r2, [pc, #496]	; (800142c <HAL_RCC_OscConfig+0x470>)
 800123c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001240:	6413      	str	r3, [r2, #64]	; 0x40
 8001242:	4b7a      	ldr	r3, [pc, #488]	; (800142c <HAL_RCC_OscConfig+0x470>)
 8001244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800124a:	60bb      	str	r3, [r7, #8]
 800124c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800124e:	2301      	movs	r3, #1
 8001250:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001252:	4b77      	ldr	r3, [pc, #476]	; (8001430 <HAL_RCC_OscConfig+0x474>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800125a:	2b00      	cmp	r3, #0
 800125c:	d118      	bne.n	8001290 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800125e:	4b74      	ldr	r3, [pc, #464]	; (8001430 <HAL_RCC_OscConfig+0x474>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a73      	ldr	r2, [pc, #460]	; (8001430 <HAL_RCC_OscConfig+0x474>)
 8001264:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001268:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800126a:	f7ff fc19 	bl	8000aa0 <HAL_GetTick>
 800126e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001270:	e008      	b.n	8001284 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001272:	f7ff fc15 	bl	8000aa0 <HAL_GetTick>
 8001276:	4602      	mov	r2, r0
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	2b02      	cmp	r3, #2
 800127e:	d901      	bls.n	8001284 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001280:	2303      	movs	r3, #3
 8001282:	e10c      	b.n	800149e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001284:	4b6a      	ldr	r3, [pc, #424]	; (8001430 <HAL_RCC_OscConfig+0x474>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800128c:	2b00      	cmp	r3, #0
 800128e:	d0f0      	beq.n	8001272 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	2b01      	cmp	r3, #1
 8001296:	d106      	bne.n	80012a6 <HAL_RCC_OscConfig+0x2ea>
 8001298:	4b64      	ldr	r3, [pc, #400]	; (800142c <HAL_RCC_OscConfig+0x470>)
 800129a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800129c:	4a63      	ldr	r2, [pc, #396]	; (800142c <HAL_RCC_OscConfig+0x470>)
 800129e:	f043 0301 	orr.w	r3, r3, #1
 80012a2:	6713      	str	r3, [r2, #112]	; 0x70
 80012a4:	e01c      	b.n	80012e0 <HAL_RCC_OscConfig+0x324>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	2b05      	cmp	r3, #5
 80012ac:	d10c      	bne.n	80012c8 <HAL_RCC_OscConfig+0x30c>
 80012ae:	4b5f      	ldr	r3, [pc, #380]	; (800142c <HAL_RCC_OscConfig+0x470>)
 80012b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012b2:	4a5e      	ldr	r2, [pc, #376]	; (800142c <HAL_RCC_OscConfig+0x470>)
 80012b4:	f043 0304 	orr.w	r3, r3, #4
 80012b8:	6713      	str	r3, [r2, #112]	; 0x70
 80012ba:	4b5c      	ldr	r3, [pc, #368]	; (800142c <HAL_RCC_OscConfig+0x470>)
 80012bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012be:	4a5b      	ldr	r2, [pc, #364]	; (800142c <HAL_RCC_OscConfig+0x470>)
 80012c0:	f043 0301 	orr.w	r3, r3, #1
 80012c4:	6713      	str	r3, [r2, #112]	; 0x70
 80012c6:	e00b      	b.n	80012e0 <HAL_RCC_OscConfig+0x324>
 80012c8:	4b58      	ldr	r3, [pc, #352]	; (800142c <HAL_RCC_OscConfig+0x470>)
 80012ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012cc:	4a57      	ldr	r2, [pc, #348]	; (800142c <HAL_RCC_OscConfig+0x470>)
 80012ce:	f023 0301 	bic.w	r3, r3, #1
 80012d2:	6713      	str	r3, [r2, #112]	; 0x70
 80012d4:	4b55      	ldr	r3, [pc, #340]	; (800142c <HAL_RCC_OscConfig+0x470>)
 80012d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012d8:	4a54      	ldr	r2, [pc, #336]	; (800142c <HAL_RCC_OscConfig+0x470>)
 80012da:	f023 0304 	bic.w	r3, r3, #4
 80012de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d015      	beq.n	8001314 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012e8:	f7ff fbda 	bl	8000aa0 <HAL_GetTick>
 80012ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012ee:	e00a      	b.n	8001306 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012f0:	f7ff fbd6 	bl	8000aa0 <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80012fe:	4293      	cmp	r3, r2
 8001300:	d901      	bls.n	8001306 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e0cb      	b.n	800149e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001306:	4b49      	ldr	r3, [pc, #292]	; (800142c <HAL_RCC_OscConfig+0x470>)
 8001308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	2b00      	cmp	r3, #0
 8001310:	d0ee      	beq.n	80012f0 <HAL_RCC_OscConfig+0x334>
 8001312:	e014      	b.n	800133e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001314:	f7ff fbc4 	bl	8000aa0 <HAL_GetTick>
 8001318:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800131a:	e00a      	b.n	8001332 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800131c:	f7ff fbc0 	bl	8000aa0 <HAL_GetTick>
 8001320:	4602      	mov	r2, r0
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	f241 3288 	movw	r2, #5000	; 0x1388
 800132a:	4293      	cmp	r3, r2
 800132c:	d901      	bls.n	8001332 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e0b5      	b.n	800149e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001332:	4b3e      	ldr	r3, [pc, #248]	; (800142c <HAL_RCC_OscConfig+0x470>)
 8001334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	2b00      	cmp	r3, #0
 800133c:	d1ee      	bne.n	800131c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800133e:	7dfb      	ldrb	r3, [r7, #23]
 8001340:	2b01      	cmp	r3, #1
 8001342:	d105      	bne.n	8001350 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001344:	4b39      	ldr	r3, [pc, #228]	; (800142c <HAL_RCC_OscConfig+0x470>)
 8001346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001348:	4a38      	ldr	r2, [pc, #224]	; (800142c <HAL_RCC_OscConfig+0x470>)
 800134a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800134e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	699b      	ldr	r3, [r3, #24]
 8001354:	2b00      	cmp	r3, #0
 8001356:	f000 80a1 	beq.w	800149c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800135a:	4b34      	ldr	r3, [pc, #208]	; (800142c <HAL_RCC_OscConfig+0x470>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	f003 030c 	and.w	r3, r3, #12
 8001362:	2b08      	cmp	r3, #8
 8001364:	d05c      	beq.n	8001420 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	699b      	ldr	r3, [r3, #24]
 800136a:	2b02      	cmp	r3, #2
 800136c:	d141      	bne.n	80013f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800136e:	4b31      	ldr	r3, [pc, #196]	; (8001434 <HAL_RCC_OscConfig+0x478>)
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001374:	f7ff fb94 	bl	8000aa0 <HAL_GetTick>
 8001378:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800137a:	e008      	b.n	800138e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800137c:	f7ff fb90 	bl	8000aa0 <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	2b02      	cmp	r3, #2
 8001388:	d901      	bls.n	800138e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e087      	b.n	800149e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800138e:	4b27      	ldr	r3, [pc, #156]	; (800142c <HAL_RCC_OscConfig+0x470>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d1f0      	bne.n	800137c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	69da      	ldr	r2, [r3, #28]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6a1b      	ldr	r3, [r3, #32]
 80013a2:	431a      	orrs	r2, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a8:	019b      	lsls	r3, r3, #6
 80013aa:	431a      	orrs	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b0:	085b      	lsrs	r3, r3, #1
 80013b2:	3b01      	subs	r3, #1
 80013b4:	041b      	lsls	r3, r3, #16
 80013b6:	431a      	orrs	r2, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013bc:	061b      	lsls	r3, r3, #24
 80013be:	491b      	ldr	r1, [pc, #108]	; (800142c <HAL_RCC_OscConfig+0x470>)
 80013c0:	4313      	orrs	r3, r2
 80013c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013c4:	4b1b      	ldr	r3, [pc, #108]	; (8001434 <HAL_RCC_OscConfig+0x478>)
 80013c6:	2201      	movs	r2, #1
 80013c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ca:	f7ff fb69 	bl	8000aa0 <HAL_GetTick>
 80013ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013d0:	e008      	b.n	80013e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013d2:	f7ff fb65 	bl	8000aa0 <HAL_GetTick>
 80013d6:	4602      	mov	r2, r0
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d901      	bls.n	80013e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80013e0:	2303      	movs	r3, #3
 80013e2:	e05c      	b.n	800149e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013e4:	4b11      	ldr	r3, [pc, #68]	; (800142c <HAL_RCC_OscConfig+0x470>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d0f0      	beq.n	80013d2 <HAL_RCC_OscConfig+0x416>
 80013f0:	e054      	b.n	800149c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013f2:	4b10      	ldr	r3, [pc, #64]	; (8001434 <HAL_RCC_OscConfig+0x478>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f8:	f7ff fb52 	bl	8000aa0 <HAL_GetTick>
 80013fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013fe:	e008      	b.n	8001412 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001400:	f7ff fb4e 	bl	8000aa0 <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	2b02      	cmp	r3, #2
 800140c:	d901      	bls.n	8001412 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e045      	b.n	800149e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001412:	4b06      	ldr	r3, [pc, #24]	; (800142c <HAL_RCC_OscConfig+0x470>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d1f0      	bne.n	8001400 <HAL_RCC_OscConfig+0x444>
 800141e:	e03d      	b.n	800149c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	699b      	ldr	r3, [r3, #24]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d107      	bne.n	8001438 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	e038      	b.n	800149e <HAL_RCC_OscConfig+0x4e2>
 800142c:	40023800 	.word	0x40023800
 8001430:	40007000 	.word	0x40007000
 8001434:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001438:	4b1b      	ldr	r3, [pc, #108]	; (80014a8 <HAL_RCC_OscConfig+0x4ec>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	699b      	ldr	r3, [r3, #24]
 8001442:	2b01      	cmp	r3, #1
 8001444:	d028      	beq.n	8001498 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001450:	429a      	cmp	r2, r3
 8001452:	d121      	bne.n	8001498 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800145e:	429a      	cmp	r2, r3
 8001460:	d11a      	bne.n	8001498 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001462:	68fa      	ldr	r2, [r7, #12]
 8001464:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001468:	4013      	ands	r3, r2
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800146e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001470:	4293      	cmp	r3, r2
 8001472:	d111      	bne.n	8001498 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800147e:	085b      	lsrs	r3, r3, #1
 8001480:	3b01      	subs	r3, #1
 8001482:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001484:	429a      	cmp	r2, r3
 8001486:	d107      	bne.n	8001498 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001492:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001494:	429a      	cmp	r2, r3
 8001496:	d001      	beq.n	800149c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e000      	b.n	800149e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3718      	adds	r7, #24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40023800 	.word	0x40023800

080014ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d101      	bne.n	80014c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e0cc      	b.n	800165a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014c0:	4b68      	ldr	r3, [pc, #416]	; (8001664 <HAL_RCC_ClockConfig+0x1b8>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 0307 	and.w	r3, r3, #7
 80014c8:	683a      	ldr	r2, [r7, #0]
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d90c      	bls.n	80014e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ce:	4b65      	ldr	r3, [pc, #404]	; (8001664 <HAL_RCC_ClockConfig+0x1b8>)
 80014d0:	683a      	ldr	r2, [r7, #0]
 80014d2:	b2d2      	uxtb	r2, r2
 80014d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014d6:	4b63      	ldr	r3, [pc, #396]	; (8001664 <HAL_RCC_ClockConfig+0x1b8>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0307 	and.w	r3, r3, #7
 80014de:	683a      	ldr	r2, [r7, #0]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d001      	beq.n	80014e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e0b8      	b.n	800165a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0302 	and.w	r3, r3, #2
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d020      	beq.n	8001536 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0304 	and.w	r3, r3, #4
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d005      	beq.n	800150c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001500:	4b59      	ldr	r3, [pc, #356]	; (8001668 <HAL_RCC_ClockConfig+0x1bc>)
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	4a58      	ldr	r2, [pc, #352]	; (8001668 <HAL_RCC_ClockConfig+0x1bc>)
 8001506:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800150a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0308 	and.w	r3, r3, #8
 8001514:	2b00      	cmp	r3, #0
 8001516:	d005      	beq.n	8001524 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001518:	4b53      	ldr	r3, [pc, #332]	; (8001668 <HAL_RCC_ClockConfig+0x1bc>)
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	4a52      	ldr	r2, [pc, #328]	; (8001668 <HAL_RCC_ClockConfig+0x1bc>)
 800151e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001522:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001524:	4b50      	ldr	r3, [pc, #320]	; (8001668 <HAL_RCC_ClockConfig+0x1bc>)
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	494d      	ldr	r1, [pc, #308]	; (8001668 <HAL_RCC_ClockConfig+0x1bc>)
 8001532:	4313      	orrs	r3, r2
 8001534:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	2b00      	cmp	r3, #0
 8001540:	d044      	beq.n	80015cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	2b01      	cmp	r3, #1
 8001548:	d107      	bne.n	800155a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800154a:	4b47      	ldr	r3, [pc, #284]	; (8001668 <HAL_RCC_ClockConfig+0x1bc>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d119      	bne.n	800158a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e07f      	b.n	800165a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	2b02      	cmp	r3, #2
 8001560:	d003      	beq.n	800156a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001566:	2b03      	cmp	r3, #3
 8001568:	d107      	bne.n	800157a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800156a:	4b3f      	ldr	r3, [pc, #252]	; (8001668 <HAL_RCC_ClockConfig+0x1bc>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d109      	bne.n	800158a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e06f      	b.n	800165a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800157a:	4b3b      	ldr	r3, [pc, #236]	; (8001668 <HAL_RCC_ClockConfig+0x1bc>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	2b00      	cmp	r3, #0
 8001584:	d101      	bne.n	800158a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e067      	b.n	800165a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800158a:	4b37      	ldr	r3, [pc, #220]	; (8001668 <HAL_RCC_ClockConfig+0x1bc>)
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	f023 0203 	bic.w	r2, r3, #3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	4934      	ldr	r1, [pc, #208]	; (8001668 <HAL_RCC_ClockConfig+0x1bc>)
 8001598:	4313      	orrs	r3, r2
 800159a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800159c:	f7ff fa80 	bl	8000aa0 <HAL_GetTick>
 80015a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015a2:	e00a      	b.n	80015ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015a4:	f7ff fa7c 	bl	8000aa0 <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e04f      	b.n	800165a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015ba:	4b2b      	ldr	r3, [pc, #172]	; (8001668 <HAL_RCC_ClockConfig+0x1bc>)
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	f003 020c 	and.w	r2, r3, #12
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d1eb      	bne.n	80015a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015cc:	4b25      	ldr	r3, [pc, #148]	; (8001664 <HAL_RCC_ClockConfig+0x1b8>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0307 	and.w	r3, r3, #7
 80015d4:	683a      	ldr	r2, [r7, #0]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d20c      	bcs.n	80015f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015da:	4b22      	ldr	r3, [pc, #136]	; (8001664 <HAL_RCC_ClockConfig+0x1b8>)
 80015dc:	683a      	ldr	r2, [r7, #0]
 80015de:	b2d2      	uxtb	r2, r2
 80015e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015e2:	4b20      	ldr	r3, [pc, #128]	; (8001664 <HAL_RCC_ClockConfig+0x1b8>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0307 	and.w	r3, r3, #7
 80015ea:	683a      	ldr	r2, [r7, #0]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d001      	beq.n	80015f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e032      	b.n	800165a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0304 	and.w	r3, r3, #4
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d008      	beq.n	8001612 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001600:	4b19      	ldr	r3, [pc, #100]	; (8001668 <HAL_RCC_ClockConfig+0x1bc>)
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	4916      	ldr	r1, [pc, #88]	; (8001668 <HAL_RCC_ClockConfig+0x1bc>)
 800160e:	4313      	orrs	r3, r2
 8001610:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0308 	and.w	r3, r3, #8
 800161a:	2b00      	cmp	r3, #0
 800161c:	d009      	beq.n	8001632 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800161e:	4b12      	ldr	r3, [pc, #72]	; (8001668 <HAL_RCC_ClockConfig+0x1bc>)
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	691b      	ldr	r3, [r3, #16]
 800162a:	00db      	lsls	r3, r3, #3
 800162c:	490e      	ldr	r1, [pc, #56]	; (8001668 <HAL_RCC_ClockConfig+0x1bc>)
 800162e:	4313      	orrs	r3, r2
 8001630:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001632:	f000 f821 	bl	8001678 <HAL_RCC_GetSysClockFreq>
 8001636:	4602      	mov	r2, r0
 8001638:	4b0b      	ldr	r3, [pc, #44]	; (8001668 <HAL_RCC_ClockConfig+0x1bc>)
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	091b      	lsrs	r3, r3, #4
 800163e:	f003 030f 	and.w	r3, r3, #15
 8001642:	490a      	ldr	r1, [pc, #40]	; (800166c <HAL_RCC_ClockConfig+0x1c0>)
 8001644:	5ccb      	ldrb	r3, [r1, r3]
 8001646:	fa22 f303 	lsr.w	r3, r2, r3
 800164a:	4a09      	ldr	r2, [pc, #36]	; (8001670 <HAL_RCC_ClockConfig+0x1c4>)
 800164c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800164e:	4b09      	ldr	r3, [pc, #36]	; (8001674 <HAL_RCC_ClockConfig+0x1c8>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff f9e0 	bl	8000a18 <HAL_InitTick>

  return HAL_OK;
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	40023c00 	.word	0x40023c00
 8001668:	40023800 	.word	0x40023800
 800166c:	0800263c 	.word	0x0800263c
 8001670:	20000000 	.word	0x20000000
 8001674:	20000004 	.word	0x20000004

08001678 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001678:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800167c:	b090      	sub	sp, #64	; 0x40
 800167e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001680:	2300      	movs	r3, #0
 8001682:	637b      	str	r3, [r7, #52]	; 0x34
 8001684:	2300      	movs	r3, #0
 8001686:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001688:	2300      	movs	r3, #0
 800168a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800168c:	2300      	movs	r3, #0
 800168e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001690:	4b59      	ldr	r3, [pc, #356]	; (80017f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	f003 030c 	and.w	r3, r3, #12
 8001698:	2b08      	cmp	r3, #8
 800169a:	d00d      	beq.n	80016b8 <HAL_RCC_GetSysClockFreq+0x40>
 800169c:	2b08      	cmp	r3, #8
 800169e:	f200 80a1 	bhi.w	80017e4 <HAL_RCC_GetSysClockFreq+0x16c>
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d002      	beq.n	80016ac <HAL_RCC_GetSysClockFreq+0x34>
 80016a6:	2b04      	cmp	r3, #4
 80016a8:	d003      	beq.n	80016b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80016aa:	e09b      	b.n	80017e4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80016ac:	4b53      	ldr	r3, [pc, #332]	; (80017fc <HAL_RCC_GetSysClockFreq+0x184>)
 80016ae:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80016b0:	e09b      	b.n	80017ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80016b2:	4b53      	ldr	r3, [pc, #332]	; (8001800 <HAL_RCC_GetSysClockFreq+0x188>)
 80016b4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80016b6:	e098      	b.n	80017ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016b8:	4b4f      	ldr	r3, [pc, #316]	; (80017f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016c0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016c2:	4b4d      	ldr	r3, [pc, #308]	; (80017f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d028      	beq.n	8001720 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016ce:	4b4a      	ldr	r3, [pc, #296]	; (80017f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	099b      	lsrs	r3, r3, #6
 80016d4:	2200      	movs	r2, #0
 80016d6:	623b      	str	r3, [r7, #32]
 80016d8:	627a      	str	r2, [r7, #36]	; 0x24
 80016da:	6a3b      	ldr	r3, [r7, #32]
 80016dc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80016e0:	2100      	movs	r1, #0
 80016e2:	4b47      	ldr	r3, [pc, #284]	; (8001800 <HAL_RCC_GetSysClockFreq+0x188>)
 80016e4:	fb03 f201 	mul.w	r2, r3, r1
 80016e8:	2300      	movs	r3, #0
 80016ea:	fb00 f303 	mul.w	r3, r0, r3
 80016ee:	4413      	add	r3, r2
 80016f0:	4a43      	ldr	r2, [pc, #268]	; (8001800 <HAL_RCC_GetSysClockFreq+0x188>)
 80016f2:	fba0 1202 	umull	r1, r2, r0, r2
 80016f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80016f8:	460a      	mov	r2, r1
 80016fa:	62ba      	str	r2, [r7, #40]	; 0x28
 80016fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016fe:	4413      	add	r3, r2
 8001700:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001704:	2200      	movs	r2, #0
 8001706:	61bb      	str	r3, [r7, #24]
 8001708:	61fa      	str	r2, [r7, #28]
 800170a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800170e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001712:	f7fe fd59 	bl	80001c8 <__aeabi_uldivmod>
 8001716:	4602      	mov	r2, r0
 8001718:	460b      	mov	r3, r1
 800171a:	4613      	mov	r3, r2
 800171c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800171e:	e053      	b.n	80017c8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001720:	4b35      	ldr	r3, [pc, #212]	; (80017f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	099b      	lsrs	r3, r3, #6
 8001726:	2200      	movs	r2, #0
 8001728:	613b      	str	r3, [r7, #16]
 800172a:	617a      	str	r2, [r7, #20]
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001732:	f04f 0b00 	mov.w	fp, #0
 8001736:	4652      	mov	r2, sl
 8001738:	465b      	mov	r3, fp
 800173a:	f04f 0000 	mov.w	r0, #0
 800173e:	f04f 0100 	mov.w	r1, #0
 8001742:	0159      	lsls	r1, r3, #5
 8001744:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001748:	0150      	lsls	r0, r2, #5
 800174a:	4602      	mov	r2, r0
 800174c:	460b      	mov	r3, r1
 800174e:	ebb2 080a 	subs.w	r8, r2, sl
 8001752:	eb63 090b 	sbc.w	r9, r3, fp
 8001756:	f04f 0200 	mov.w	r2, #0
 800175a:	f04f 0300 	mov.w	r3, #0
 800175e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001762:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001766:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800176a:	ebb2 0408 	subs.w	r4, r2, r8
 800176e:	eb63 0509 	sbc.w	r5, r3, r9
 8001772:	f04f 0200 	mov.w	r2, #0
 8001776:	f04f 0300 	mov.w	r3, #0
 800177a:	00eb      	lsls	r3, r5, #3
 800177c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001780:	00e2      	lsls	r2, r4, #3
 8001782:	4614      	mov	r4, r2
 8001784:	461d      	mov	r5, r3
 8001786:	eb14 030a 	adds.w	r3, r4, sl
 800178a:	603b      	str	r3, [r7, #0]
 800178c:	eb45 030b 	adc.w	r3, r5, fp
 8001790:	607b      	str	r3, [r7, #4]
 8001792:	f04f 0200 	mov.w	r2, #0
 8001796:	f04f 0300 	mov.w	r3, #0
 800179a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800179e:	4629      	mov	r1, r5
 80017a0:	028b      	lsls	r3, r1, #10
 80017a2:	4621      	mov	r1, r4
 80017a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017a8:	4621      	mov	r1, r4
 80017aa:	028a      	lsls	r2, r1, #10
 80017ac:	4610      	mov	r0, r2
 80017ae:	4619      	mov	r1, r3
 80017b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017b2:	2200      	movs	r2, #0
 80017b4:	60bb      	str	r3, [r7, #8]
 80017b6:	60fa      	str	r2, [r7, #12]
 80017b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80017bc:	f7fe fd04 	bl	80001c8 <__aeabi_uldivmod>
 80017c0:	4602      	mov	r2, r0
 80017c2:	460b      	mov	r3, r1
 80017c4:	4613      	mov	r3, r2
 80017c6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80017c8:	4b0b      	ldr	r3, [pc, #44]	; (80017f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	0c1b      	lsrs	r3, r3, #16
 80017ce:	f003 0303 	and.w	r3, r3, #3
 80017d2:	3301      	adds	r3, #1
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80017d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80017da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80017e2:	e002      	b.n	80017ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017e4:	4b05      	ldr	r3, [pc, #20]	; (80017fc <HAL_RCC_GetSysClockFreq+0x184>)
 80017e6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80017e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3740      	adds	r7, #64	; 0x40
 80017f0:	46bd      	mov	sp, r7
 80017f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017f6:	bf00      	nop
 80017f8:	40023800 	.word	0x40023800
 80017fc:	00f42400 	.word	0x00f42400
 8001800:	017d7840 	.word	0x017d7840

08001804 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d101      	bne.n	8001816 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e041      	b.n	800189a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800181c:	b2db      	uxtb	r3, r3
 800181e:	2b00      	cmp	r3, #0
 8001820:	d106      	bne.n	8001830 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2200      	movs	r2, #0
 8001826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f7ff f810 	bl	8000850 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2202      	movs	r2, #2
 8001834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	3304      	adds	r3, #4
 8001840:	4619      	mov	r1, r3
 8001842:	4610      	mov	r0, r2
 8001844:	f000 fad8 	bl	8001df8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2201      	movs	r2, #1
 800184c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2201      	movs	r2, #1
 8001854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2201      	movs	r2, #1
 800185c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2201      	movs	r2, #1
 8001864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2201      	movs	r2, #1
 800186c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2201      	movs	r2, #1
 8001874:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2201      	movs	r2, #1
 800187c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2201      	movs	r2, #1
 8001884:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2201      	movs	r2, #1
 800188c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2201      	movs	r2, #1
 8001894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b082      	sub	sp, #8
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d101      	bne.n	80018b4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e041      	b.n	8001938 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d106      	bne.n	80018ce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f000 f839 	bl	8001940 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2202      	movs	r2, #2
 80018d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	3304      	adds	r3, #4
 80018de:	4619      	mov	r1, r3
 80018e0:	4610      	mov	r0, r2
 80018e2:	f000 fa89 	bl	8001df8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2201      	movs	r2, #1
 80018ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2201      	movs	r2, #1
 80018f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2201      	movs	r2, #1
 80018fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2201      	movs	r2, #1
 8001902:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2201      	movs	r2, #1
 800190a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2201      	movs	r2, #1
 8001912:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2201      	movs	r2, #1
 800191a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2201      	movs	r2, #1
 8001922:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2201      	movs	r2, #1
 800192a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2201      	movs	r2, #1
 8001932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001936:	2300      	movs	r3, #0
}
 8001938:	4618      	mov	r0, r3
 800193a:	3708      	adds	r7, #8
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr

08001954 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d109      	bne.n	8001978 <HAL_TIM_PWM_Start+0x24>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800196a:	b2db      	uxtb	r3, r3
 800196c:	2b01      	cmp	r3, #1
 800196e:	bf14      	ite	ne
 8001970:	2301      	movne	r3, #1
 8001972:	2300      	moveq	r3, #0
 8001974:	b2db      	uxtb	r3, r3
 8001976:	e022      	b.n	80019be <HAL_TIM_PWM_Start+0x6a>
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	2b04      	cmp	r3, #4
 800197c:	d109      	bne.n	8001992 <HAL_TIM_PWM_Start+0x3e>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001984:	b2db      	uxtb	r3, r3
 8001986:	2b01      	cmp	r3, #1
 8001988:	bf14      	ite	ne
 800198a:	2301      	movne	r3, #1
 800198c:	2300      	moveq	r3, #0
 800198e:	b2db      	uxtb	r3, r3
 8001990:	e015      	b.n	80019be <HAL_TIM_PWM_Start+0x6a>
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	2b08      	cmp	r3, #8
 8001996:	d109      	bne.n	80019ac <HAL_TIM_PWM_Start+0x58>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	bf14      	ite	ne
 80019a4:	2301      	movne	r3, #1
 80019a6:	2300      	moveq	r3, #0
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	e008      	b.n	80019be <HAL_TIM_PWM_Start+0x6a>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	bf14      	ite	ne
 80019b8:	2301      	movne	r3, #1
 80019ba:	2300      	moveq	r3, #0
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e07c      	b.n	8001ac0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d104      	bne.n	80019d6 <HAL_TIM_PWM_Start+0x82>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2202      	movs	r2, #2
 80019d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80019d4:	e013      	b.n	80019fe <HAL_TIM_PWM_Start+0xaa>
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	2b04      	cmp	r3, #4
 80019da:	d104      	bne.n	80019e6 <HAL_TIM_PWM_Start+0x92>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2202      	movs	r2, #2
 80019e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80019e4:	e00b      	b.n	80019fe <HAL_TIM_PWM_Start+0xaa>
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	2b08      	cmp	r3, #8
 80019ea:	d104      	bne.n	80019f6 <HAL_TIM_PWM_Start+0xa2>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2202      	movs	r2, #2
 80019f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80019f4:	e003      	b.n	80019fe <HAL_TIM_PWM_Start+0xaa>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2202      	movs	r2, #2
 80019fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2201      	movs	r2, #1
 8001a04:	6839      	ldr	r1, [r7, #0]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f000 fcec 	bl	80023e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a2d      	ldr	r2, [pc, #180]	; (8001ac8 <HAL_TIM_PWM_Start+0x174>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d004      	beq.n	8001a20 <HAL_TIM_PWM_Start+0xcc>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a2c      	ldr	r2, [pc, #176]	; (8001acc <HAL_TIM_PWM_Start+0x178>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d101      	bne.n	8001a24 <HAL_TIM_PWM_Start+0xd0>
 8001a20:	2301      	movs	r3, #1
 8001a22:	e000      	b.n	8001a26 <HAL_TIM_PWM_Start+0xd2>
 8001a24:	2300      	movs	r3, #0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d007      	beq.n	8001a3a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a38:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a22      	ldr	r2, [pc, #136]	; (8001ac8 <HAL_TIM_PWM_Start+0x174>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d022      	beq.n	8001a8a <HAL_TIM_PWM_Start+0x136>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a4c:	d01d      	beq.n	8001a8a <HAL_TIM_PWM_Start+0x136>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a1f      	ldr	r2, [pc, #124]	; (8001ad0 <HAL_TIM_PWM_Start+0x17c>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d018      	beq.n	8001a8a <HAL_TIM_PWM_Start+0x136>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a1d      	ldr	r2, [pc, #116]	; (8001ad4 <HAL_TIM_PWM_Start+0x180>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d013      	beq.n	8001a8a <HAL_TIM_PWM_Start+0x136>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a1c      	ldr	r2, [pc, #112]	; (8001ad8 <HAL_TIM_PWM_Start+0x184>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d00e      	beq.n	8001a8a <HAL_TIM_PWM_Start+0x136>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a16      	ldr	r2, [pc, #88]	; (8001acc <HAL_TIM_PWM_Start+0x178>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d009      	beq.n	8001a8a <HAL_TIM_PWM_Start+0x136>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a18      	ldr	r2, [pc, #96]	; (8001adc <HAL_TIM_PWM_Start+0x188>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d004      	beq.n	8001a8a <HAL_TIM_PWM_Start+0x136>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a16      	ldr	r2, [pc, #88]	; (8001ae0 <HAL_TIM_PWM_Start+0x18c>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d111      	bne.n	8001aae <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f003 0307 	and.w	r3, r3, #7
 8001a94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2b06      	cmp	r3, #6
 8001a9a:	d010      	beq.n	8001abe <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f042 0201 	orr.w	r2, r2, #1
 8001aaa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001aac:	e007      	b.n	8001abe <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f042 0201 	orr.w	r2, r2, #1
 8001abc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3710      	adds	r7, #16
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	40010000 	.word	0x40010000
 8001acc:	40010400 	.word	0x40010400
 8001ad0:	40000400 	.word	0x40000400
 8001ad4:	40000800 	.word	0x40000800
 8001ad8:	40000c00 	.word	0x40000c00
 8001adc:	40014000 	.word	0x40014000
 8001ae0:	40001800 	.word	0x40001800

08001ae4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001af0:	2300      	movs	r3, #0
 8001af2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d101      	bne.n	8001b02 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001afe:	2302      	movs	r3, #2
 8001b00:	e0ae      	b.n	8001c60 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2201      	movs	r2, #1
 8001b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2b0c      	cmp	r3, #12
 8001b0e:	f200 809f 	bhi.w	8001c50 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001b12:	a201      	add	r2, pc, #4	; (adr r2, 8001b18 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b18:	08001b4d 	.word	0x08001b4d
 8001b1c:	08001c51 	.word	0x08001c51
 8001b20:	08001c51 	.word	0x08001c51
 8001b24:	08001c51 	.word	0x08001c51
 8001b28:	08001b8d 	.word	0x08001b8d
 8001b2c:	08001c51 	.word	0x08001c51
 8001b30:	08001c51 	.word	0x08001c51
 8001b34:	08001c51 	.word	0x08001c51
 8001b38:	08001bcf 	.word	0x08001bcf
 8001b3c:	08001c51 	.word	0x08001c51
 8001b40:	08001c51 	.word	0x08001c51
 8001b44:	08001c51 	.word	0x08001c51
 8001b48:	08001c0f 	.word	0x08001c0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	68b9      	ldr	r1, [r7, #8]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f000 f9fc 	bl	8001f50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	699a      	ldr	r2, [r3, #24]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f042 0208 	orr.w	r2, r2, #8
 8001b66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	699a      	ldr	r2, [r3, #24]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f022 0204 	bic.w	r2, r2, #4
 8001b76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	6999      	ldr	r1, [r3, #24]
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	691a      	ldr	r2, [r3, #16]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	430a      	orrs	r2, r1
 8001b88:	619a      	str	r2, [r3, #24]
      break;
 8001b8a:	e064      	b.n	8001c56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	68b9      	ldr	r1, [r7, #8]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f000 fa4c 	bl	8002030 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	699a      	ldr	r2, [r3, #24]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ba6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	699a      	ldr	r2, [r3, #24]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	6999      	ldr	r1, [r3, #24]
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	691b      	ldr	r3, [r3, #16]
 8001bc2:	021a      	lsls	r2, r3, #8
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	619a      	str	r2, [r3, #24]
      break;
 8001bcc:	e043      	b.n	8001c56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	68b9      	ldr	r1, [r7, #8]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f000 faa1 	bl	800211c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	69da      	ldr	r2, [r3, #28]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f042 0208 	orr.w	r2, r2, #8
 8001be8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	69da      	ldr	r2, [r3, #28]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f022 0204 	bic.w	r2, r2, #4
 8001bf8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	69d9      	ldr	r1, [r3, #28]
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	691a      	ldr	r2, [r3, #16]
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	430a      	orrs	r2, r1
 8001c0a:	61da      	str	r2, [r3, #28]
      break;
 8001c0c:	e023      	b.n	8001c56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	68b9      	ldr	r1, [r7, #8]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f000 faf5 	bl	8002204 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	69da      	ldr	r2, [r3, #28]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	69da      	ldr	r2, [r3, #28]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	69d9      	ldr	r1, [r3, #28]
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	691b      	ldr	r3, [r3, #16]
 8001c44:	021a      	lsls	r2, r3, #8
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	61da      	str	r2, [r3, #28]
      break;
 8001c4e:	e002      	b.n	8001c56 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	75fb      	strb	r3, [r7, #23]
      break;
 8001c54:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001c5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3718      	adds	r7, #24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c72:	2300      	movs	r3, #0
 8001c74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d101      	bne.n	8001c84 <HAL_TIM_ConfigClockSource+0x1c>
 8001c80:	2302      	movs	r3, #2
 8001c82:	e0b4      	b.n	8001dee <HAL_TIM_ConfigClockSource+0x186>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2202      	movs	r2, #2
 8001c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001ca2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001caa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	68ba      	ldr	r2, [r7, #8]
 8001cb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cbc:	d03e      	beq.n	8001d3c <HAL_TIM_ConfigClockSource+0xd4>
 8001cbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cc2:	f200 8087 	bhi.w	8001dd4 <HAL_TIM_ConfigClockSource+0x16c>
 8001cc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cca:	f000 8086 	beq.w	8001dda <HAL_TIM_ConfigClockSource+0x172>
 8001cce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cd2:	d87f      	bhi.n	8001dd4 <HAL_TIM_ConfigClockSource+0x16c>
 8001cd4:	2b70      	cmp	r3, #112	; 0x70
 8001cd6:	d01a      	beq.n	8001d0e <HAL_TIM_ConfigClockSource+0xa6>
 8001cd8:	2b70      	cmp	r3, #112	; 0x70
 8001cda:	d87b      	bhi.n	8001dd4 <HAL_TIM_ConfigClockSource+0x16c>
 8001cdc:	2b60      	cmp	r3, #96	; 0x60
 8001cde:	d050      	beq.n	8001d82 <HAL_TIM_ConfigClockSource+0x11a>
 8001ce0:	2b60      	cmp	r3, #96	; 0x60
 8001ce2:	d877      	bhi.n	8001dd4 <HAL_TIM_ConfigClockSource+0x16c>
 8001ce4:	2b50      	cmp	r3, #80	; 0x50
 8001ce6:	d03c      	beq.n	8001d62 <HAL_TIM_ConfigClockSource+0xfa>
 8001ce8:	2b50      	cmp	r3, #80	; 0x50
 8001cea:	d873      	bhi.n	8001dd4 <HAL_TIM_ConfigClockSource+0x16c>
 8001cec:	2b40      	cmp	r3, #64	; 0x40
 8001cee:	d058      	beq.n	8001da2 <HAL_TIM_ConfigClockSource+0x13a>
 8001cf0:	2b40      	cmp	r3, #64	; 0x40
 8001cf2:	d86f      	bhi.n	8001dd4 <HAL_TIM_ConfigClockSource+0x16c>
 8001cf4:	2b30      	cmp	r3, #48	; 0x30
 8001cf6:	d064      	beq.n	8001dc2 <HAL_TIM_ConfigClockSource+0x15a>
 8001cf8:	2b30      	cmp	r3, #48	; 0x30
 8001cfa:	d86b      	bhi.n	8001dd4 <HAL_TIM_ConfigClockSource+0x16c>
 8001cfc:	2b20      	cmp	r3, #32
 8001cfe:	d060      	beq.n	8001dc2 <HAL_TIM_ConfigClockSource+0x15a>
 8001d00:	2b20      	cmp	r3, #32
 8001d02:	d867      	bhi.n	8001dd4 <HAL_TIM_ConfigClockSource+0x16c>
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d05c      	beq.n	8001dc2 <HAL_TIM_ConfigClockSource+0x15a>
 8001d08:	2b10      	cmp	r3, #16
 8001d0a:	d05a      	beq.n	8001dc2 <HAL_TIM_ConfigClockSource+0x15a>
 8001d0c:	e062      	b.n	8001dd4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001d1e:	f000 fb41 	bl	80023a4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001d30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	68ba      	ldr	r2, [r7, #8]
 8001d38:	609a      	str	r2, [r3, #8]
      break;
 8001d3a:	e04f      	b.n	8001ddc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001d4c:	f000 fb2a 	bl	80023a4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	689a      	ldr	r2, [r3, #8]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d5e:	609a      	str	r2, [r3, #8]
      break;
 8001d60:	e03c      	b.n	8001ddc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d6e:	461a      	mov	r2, r3
 8001d70:	f000 fa9e 	bl	80022b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2150      	movs	r1, #80	; 0x50
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f000 faf7 	bl	800236e <TIM_ITRx_SetConfig>
      break;
 8001d80:	e02c      	b.n	8001ddc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001d8e:	461a      	mov	r2, r3
 8001d90:	f000 fabd 	bl	800230e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2160      	movs	r1, #96	; 0x60
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f000 fae7 	bl	800236e <TIM_ITRx_SetConfig>
      break;
 8001da0:	e01c      	b.n	8001ddc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001dae:	461a      	mov	r2, r3
 8001db0:	f000 fa7e 	bl	80022b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2140      	movs	r1, #64	; 0x40
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f000 fad7 	bl	800236e <TIM_ITRx_SetConfig>
      break;
 8001dc0:	e00c      	b.n	8001ddc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4619      	mov	r1, r3
 8001dcc:	4610      	mov	r0, r2
 8001dce:	f000 face 	bl	800236e <TIM_ITRx_SetConfig>
      break;
 8001dd2:	e003      	b.n	8001ddc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	73fb      	strb	r3, [r7, #15]
      break;
 8001dd8:	e000      	b.n	8001ddc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001dda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2201      	movs	r2, #1
 8001de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3710      	adds	r7, #16
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
	...

08001df8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4a46      	ldr	r2, [pc, #280]	; (8001f24 <TIM_Base_SetConfig+0x12c>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d013      	beq.n	8001e38 <TIM_Base_SetConfig+0x40>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e16:	d00f      	beq.n	8001e38 <TIM_Base_SetConfig+0x40>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4a43      	ldr	r2, [pc, #268]	; (8001f28 <TIM_Base_SetConfig+0x130>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d00b      	beq.n	8001e38 <TIM_Base_SetConfig+0x40>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4a42      	ldr	r2, [pc, #264]	; (8001f2c <TIM_Base_SetConfig+0x134>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d007      	beq.n	8001e38 <TIM_Base_SetConfig+0x40>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a41      	ldr	r2, [pc, #260]	; (8001f30 <TIM_Base_SetConfig+0x138>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d003      	beq.n	8001e38 <TIM_Base_SetConfig+0x40>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	4a40      	ldr	r2, [pc, #256]	; (8001f34 <TIM_Base_SetConfig+0x13c>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d108      	bne.n	8001e4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	68fa      	ldr	r2, [r7, #12]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a35      	ldr	r2, [pc, #212]	; (8001f24 <TIM_Base_SetConfig+0x12c>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d02b      	beq.n	8001eaa <TIM_Base_SetConfig+0xb2>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e58:	d027      	beq.n	8001eaa <TIM_Base_SetConfig+0xb2>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a32      	ldr	r2, [pc, #200]	; (8001f28 <TIM_Base_SetConfig+0x130>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d023      	beq.n	8001eaa <TIM_Base_SetConfig+0xb2>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a31      	ldr	r2, [pc, #196]	; (8001f2c <TIM_Base_SetConfig+0x134>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d01f      	beq.n	8001eaa <TIM_Base_SetConfig+0xb2>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a30      	ldr	r2, [pc, #192]	; (8001f30 <TIM_Base_SetConfig+0x138>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d01b      	beq.n	8001eaa <TIM_Base_SetConfig+0xb2>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a2f      	ldr	r2, [pc, #188]	; (8001f34 <TIM_Base_SetConfig+0x13c>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d017      	beq.n	8001eaa <TIM_Base_SetConfig+0xb2>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a2e      	ldr	r2, [pc, #184]	; (8001f38 <TIM_Base_SetConfig+0x140>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d013      	beq.n	8001eaa <TIM_Base_SetConfig+0xb2>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a2d      	ldr	r2, [pc, #180]	; (8001f3c <TIM_Base_SetConfig+0x144>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d00f      	beq.n	8001eaa <TIM_Base_SetConfig+0xb2>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a2c      	ldr	r2, [pc, #176]	; (8001f40 <TIM_Base_SetConfig+0x148>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d00b      	beq.n	8001eaa <TIM_Base_SetConfig+0xb2>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a2b      	ldr	r2, [pc, #172]	; (8001f44 <TIM_Base_SetConfig+0x14c>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d007      	beq.n	8001eaa <TIM_Base_SetConfig+0xb2>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a2a      	ldr	r2, [pc, #168]	; (8001f48 <TIM_Base_SetConfig+0x150>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d003      	beq.n	8001eaa <TIM_Base_SetConfig+0xb2>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a29      	ldr	r2, [pc, #164]	; (8001f4c <TIM_Base_SetConfig+0x154>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d108      	bne.n	8001ebc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001eb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	695b      	ldr	r3, [r3, #20]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	68fa      	ldr	r2, [r7, #12]
 8001ece:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	689a      	ldr	r2, [r3, #8]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a10      	ldr	r2, [pc, #64]	; (8001f24 <TIM_Base_SetConfig+0x12c>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d003      	beq.n	8001ef0 <TIM_Base_SetConfig+0xf8>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a12      	ldr	r2, [pc, #72]	; (8001f34 <TIM_Base_SetConfig+0x13c>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d103      	bne.n	8001ef8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	691a      	ldr	r2, [r3, #16]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d105      	bne.n	8001f16 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	f023 0201 	bic.w	r2, r3, #1
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	611a      	str	r2, [r3, #16]
  }
}
 8001f16:	bf00      	nop
 8001f18:	3714      	adds	r7, #20
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	40010000 	.word	0x40010000
 8001f28:	40000400 	.word	0x40000400
 8001f2c:	40000800 	.word	0x40000800
 8001f30:	40000c00 	.word	0x40000c00
 8001f34:	40010400 	.word	0x40010400
 8001f38:	40014000 	.word	0x40014000
 8001f3c:	40014400 	.word	0x40014400
 8001f40:	40014800 	.word	0x40014800
 8001f44:	40001800 	.word	0x40001800
 8001f48:	40001c00 	.word	0x40001c00
 8001f4c:	40002000 	.word	0x40002000

08001f50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b087      	sub	sp, #28
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6a1b      	ldr	r3, [r3, #32]
 8001f5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6a1b      	ldr	r3, [r3, #32]
 8001f64:	f023 0201 	bic.w	r2, r3, #1
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	699b      	ldr	r3, [r3, #24]
 8001f76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f023 0303 	bic.w	r3, r3, #3
 8001f86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	68fa      	ldr	r2, [r7, #12]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	f023 0302 	bic.w	r3, r3, #2
 8001f98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	697a      	ldr	r2, [r7, #20]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a20      	ldr	r2, [pc, #128]	; (8002028 <TIM_OC1_SetConfig+0xd8>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d003      	beq.n	8001fb4 <TIM_OC1_SetConfig+0x64>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a1f      	ldr	r2, [pc, #124]	; (800202c <TIM_OC1_SetConfig+0xdc>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d10c      	bne.n	8001fce <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	f023 0308 	bic.w	r3, r3, #8
 8001fba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	697a      	ldr	r2, [r7, #20]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	f023 0304 	bic.w	r3, r3, #4
 8001fcc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a15      	ldr	r2, [pc, #84]	; (8002028 <TIM_OC1_SetConfig+0xd8>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d003      	beq.n	8001fde <TIM_OC1_SetConfig+0x8e>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a14      	ldr	r2, [pc, #80]	; (800202c <TIM_OC1_SetConfig+0xdc>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d111      	bne.n	8002002 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fe4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001fec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	695b      	ldr	r3, [r3, #20]
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	693a      	ldr	r2, [r7, #16]
 8002006:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	68fa      	ldr	r2, [r7, #12]
 800200c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685a      	ldr	r2, [r3, #4]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	697a      	ldr	r2, [r7, #20]
 800201a:	621a      	str	r2, [r3, #32]
}
 800201c:	bf00      	nop
 800201e:	371c      	adds	r7, #28
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr
 8002028:	40010000 	.word	0x40010000
 800202c:	40010400 	.word	0x40010400

08002030 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002030:	b480      	push	{r7}
 8002032:	b087      	sub	sp, #28
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6a1b      	ldr	r3, [r3, #32]
 800203e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a1b      	ldr	r3, [r3, #32]
 8002044:	f023 0210 	bic.w	r2, r3, #16
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	699b      	ldr	r3, [r3, #24]
 8002056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800205e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002066:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	021b      	lsls	r3, r3, #8
 800206e:	68fa      	ldr	r2, [r7, #12]
 8002070:	4313      	orrs	r3, r2
 8002072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	f023 0320 	bic.w	r3, r3, #32
 800207a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	011b      	lsls	r3, r3, #4
 8002082:	697a      	ldr	r2, [r7, #20]
 8002084:	4313      	orrs	r3, r2
 8002086:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4a22      	ldr	r2, [pc, #136]	; (8002114 <TIM_OC2_SetConfig+0xe4>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d003      	beq.n	8002098 <TIM_OC2_SetConfig+0x68>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4a21      	ldr	r2, [pc, #132]	; (8002118 <TIM_OC2_SetConfig+0xe8>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d10d      	bne.n	80020b4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800209e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	011b      	lsls	r3, r3, #4
 80020a6:	697a      	ldr	r2, [r7, #20]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80020b2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	4a17      	ldr	r2, [pc, #92]	; (8002114 <TIM_OC2_SetConfig+0xe4>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d003      	beq.n	80020c4 <TIM_OC2_SetConfig+0x94>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4a16      	ldr	r2, [pc, #88]	; (8002118 <TIM_OC2_SetConfig+0xe8>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d113      	bne.n	80020ec <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80020ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80020d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	695b      	ldr	r3, [r3, #20]
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	693a      	ldr	r2, [r7, #16]
 80020dc:	4313      	orrs	r3, r2
 80020de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	68fa      	ldr	r2, [r7, #12]
 80020f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685a      	ldr	r2, [r3, #4]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	697a      	ldr	r2, [r7, #20]
 8002104:	621a      	str	r2, [r3, #32]
}
 8002106:	bf00      	nop
 8002108:	371c      	adds	r7, #28
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	40010000 	.word	0x40010000
 8002118:	40010400 	.word	0x40010400

0800211c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800211c:	b480      	push	{r7}
 800211e:	b087      	sub	sp, #28
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a1b      	ldr	r3, [r3, #32]
 800212a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a1b      	ldr	r3, [r3, #32]
 8002130:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	69db      	ldr	r3, [r3, #28]
 8002142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800214a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f023 0303 	bic.w	r3, r3, #3
 8002152:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	68fa      	ldr	r2, [r7, #12]
 800215a:	4313      	orrs	r3, r2
 800215c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002164:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	021b      	lsls	r3, r3, #8
 800216c:	697a      	ldr	r2, [r7, #20]
 800216e:	4313      	orrs	r3, r2
 8002170:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a21      	ldr	r2, [pc, #132]	; (80021fc <TIM_OC3_SetConfig+0xe0>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d003      	beq.n	8002182 <TIM_OC3_SetConfig+0x66>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a20      	ldr	r2, [pc, #128]	; (8002200 <TIM_OC3_SetConfig+0xe4>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d10d      	bne.n	800219e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002188:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	021b      	lsls	r3, r3, #8
 8002190:	697a      	ldr	r2, [r7, #20]
 8002192:	4313      	orrs	r3, r2
 8002194:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800219c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a16      	ldr	r2, [pc, #88]	; (80021fc <TIM_OC3_SetConfig+0xe0>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d003      	beq.n	80021ae <TIM_OC3_SetConfig+0x92>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a15      	ldr	r2, [pc, #84]	; (8002200 <TIM_OC3_SetConfig+0xe4>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d113      	bne.n	80021d6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80021b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80021bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	695b      	ldr	r3, [r3, #20]
 80021c2:	011b      	lsls	r3, r3, #4
 80021c4:	693a      	ldr	r2, [r7, #16]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	011b      	lsls	r3, r3, #4
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	693a      	ldr	r2, [r7, #16]
 80021da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685a      	ldr	r2, [r3, #4]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	697a      	ldr	r2, [r7, #20]
 80021ee:	621a      	str	r2, [r3, #32]
}
 80021f0:	bf00      	nop
 80021f2:	371c      	adds	r7, #28
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr
 80021fc:	40010000 	.word	0x40010000
 8002200:	40010400 	.word	0x40010400

08002204 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002204:	b480      	push	{r7}
 8002206:	b087      	sub	sp, #28
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a1b      	ldr	r3, [r3, #32]
 8002212:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a1b      	ldr	r3, [r3, #32]
 8002218:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	69db      	ldr	r3, [r3, #28]
 800222a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002232:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800223a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	021b      	lsls	r3, r3, #8
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	4313      	orrs	r3, r2
 8002246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800224e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	031b      	lsls	r3, r3, #12
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	4313      	orrs	r3, r2
 800225a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4a12      	ldr	r2, [pc, #72]	; (80022a8 <TIM_OC4_SetConfig+0xa4>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d003      	beq.n	800226c <TIM_OC4_SetConfig+0x68>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	4a11      	ldr	r2, [pc, #68]	; (80022ac <TIM_OC4_SetConfig+0xa8>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d109      	bne.n	8002280 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002272:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	695b      	ldr	r3, [r3, #20]
 8002278:	019b      	lsls	r3, r3, #6
 800227a:	697a      	ldr	r2, [r7, #20]
 800227c:	4313      	orrs	r3, r2
 800227e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	697a      	ldr	r2, [r7, #20]
 8002284:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	68fa      	ldr	r2, [r7, #12]
 800228a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685a      	ldr	r2, [r3, #4]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	621a      	str	r2, [r3, #32]
}
 800229a:	bf00      	nop
 800229c:	371c      	adds	r7, #28
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	40010000 	.word	0x40010000
 80022ac:	40010400 	.word	0x40010400

080022b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b087      	sub	sp, #28
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6a1b      	ldr	r3, [r3, #32]
 80022c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6a1b      	ldr	r3, [r3, #32]
 80022c6:	f023 0201 	bic.w	r2, r3, #1
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	699b      	ldr	r3, [r3, #24]
 80022d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	011b      	lsls	r3, r3, #4
 80022e0:	693a      	ldr	r2, [r7, #16]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	f023 030a 	bic.w	r3, r3, #10
 80022ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80022ee:	697a      	ldr	r2, [r7, #20]
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	693a      	ldr	r2, [r7, #16]
 80022fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	697a      	ldr	r2, [r7, #20]
 8002300:	621a      	str	r2, [r3, #32]
}
 8002302:	bf00      	nop
 8002304:	371c      	adds	r7, #28
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr

0800230e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800230e:	b480      	push	{r7}
 8002310:	b087      	sub	sp, #28
 8002312:	af00      	add	r7, sp, #0
 8002314:	60f8      	str	r0, [r7, #12]
 8002316:	60b9      	str	r1, [r7, #8]
 8002318:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	6a1b      	ldr	r3, [r3, #32]
 800231e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6a1b      	ldr	r3, [r3, #32]
 8002324:	f023 0210 	bic.w	r2, r3, #16
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	699b      	ldr	r3, [r3, #24]
 8002330:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002338:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	031b      	lsls	r3, r3, #12
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	4313      	orrs	r3, r2
 8002342:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800234a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	011b      	lsls	r3, r3, #4
 8002350:	697a      	ldr	r2, [r7, #20]
 8002352:	4313      	orrs	r3, r2
 8002354:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	693a      	ldr	r2, [r7, #16]
 800235a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	697a      	ldr	r2, [r7, #20]
 8002360:	621a      	str	r2, [r3, #32]
}
 8002362:	bf00      	nop
 8002364:	371c      	adds	r7, #28
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr

0800236e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800236e:	b480      	push	{r7}
 8002370:	b085      	sub	sp, #20
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
 8002376:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002384:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002386:	683a      	ldr	r2, [r7, #0]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	4313      	orrs	r3, r2
 800238c:	f043 0307 	orr.w	r3, r3, #7
 8002390:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	68fa      	ldr	r2, [r7, #12]
 8002396:	609a      	str	r2, [r3, #8]
}
 8002398:	bf00      	nop
 800239a:	3714      	adds	r7, #20
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b087      	sub	sp, #28
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
 80023b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80023be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	021a      	lsls	r2, r3, #8
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	431a      	orrs	r2, r3
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	697a      	ldr	r2, [r7, #20]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	697a      	ldr	r2, [r7, #20]
 80023d6:	609a      	str	r2, [r3, #8]
}
 80023d8:	bf00      	nop
 80023da:	371c      	adds	r7, #28
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b087      	sub	sp, #28
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	f003 031f 	and.w	r3, r3, #31
 80023f6:	2201      	movs	r2, #1
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6a1a      	ldr	r2, [r3, #32]
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	43db      	mvns	r3, r3
 8002406:	401a      	ands	r2, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6a1a      	ldr	r2, [r3, #32]
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	f003 031f 	and.w	r3, r3, #31
 8002416:	6879      	ldr	r1, [r7, #4]
 8002418:	fa01 f303 	lsl.w	r3, r1, r3
 800241c:	431a      	orrs	r2, r3
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	621a      	str	r2, [r3, #32]
}
 8002422:	bf00      	nop
 8002424:	371c      	adds	r7, #28
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
	...

08002430 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002440:	2b01      	cmp	r3, #1
 8002442:	d101      	bne.n	8002448 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002444:	2302      	movs	r3, #2
 8002446:	e05a      	b.n	80024fe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2202      	movs	r2, #2
 8002454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800246e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	68fa      	ldr	r2, [r7, #12]
 8002476:	4313      	orrs	r3, r2
 8002478:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	68fa      	ldr	r2, [r7, #12]
 8002480:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a21      	ldr	r2, [pc, #132]	; (800250c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d022      	beq.n	80024d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002494:	d01d      	beq.n	80024d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a1d      	ldr	r2, [pc, #116]	; (8002510 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d018      	beq.n	80024d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a1b      	ldr	r2, [pc, #108]	; (8002514 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d013      	beq.n	80024d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a1a      	ldr	r2, [pc, #104]	; (8002518 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d00e      	beq.n	80024d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a18      	ldr	r2, [pc, #96]	; (800251c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d009      	beq.n	80024d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a17      	ldr	r2, [pc, #92]	; (8002520 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d004      	beq.n	80024d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a15      	ldr	r2, [pc, #84]	; (8002524 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d10c      	bne.n	80024ec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	68ba      	ldr	r2, [r7, #8]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	68ba      	ldr	r2, [r7, #8]
 80024ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3714      	adds	r7, #20
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	40010000 	.word	0x40010000
 8002510:	40000400 	.word	0x40000400
 8002514:	40000800 	.word	0x40000800
 8002518:	40000c00 	.word	0x40000c00
 800251c:	40010400 	.word	0x40010400
 8002520:	40014000 	.word	0x40014000
 8002524:	40001800 	.word	0x40001800

08002528 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002528:	b480      	push	{r7}
 800252a:	b085      	sub	sp, #20
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002532:	2300      	movs	r3, #0
 8002534:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800253c:	2b01      	cmp	r3, #1
 800253e:	d101      	bne.n	8002544 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002540:	2302      	movs	r3, #2
 8002542:	e03d      	b.n	80025c0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	4313      	orrs	r3, r2
 8002558:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	4313      	orrs	r3, r2
 8002566:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	4313      	orrs	r3, r2
 8002574:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4313      	orrs	r3, r2
 8002582:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	4313      	orrs	r3, r2
 8002590:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	695b      	ldr	r3, [r3, #20]
 800259c:	4313      	orrs	r3, r2
 800259e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	69db      	ldr	r3, [r3, #28]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	68fa      	ldr	r2, [r7, #12]
 80025b4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025be:	2300      	movs	r3, #0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3714      	adds	r7, #20
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <memset>:
 80025cc:	4402      	add	r2, r0
 80025ce:	4603      	mov	r3, r0
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d100      	bne.n	80025d6 <memset+0xa>
 80025d4:	4770      	bx	lr
 80025d6:	f803 1b01 	strb.w	r1, [r3], #1
 80025da:	e7f9      	b.n	80025d0 <memset+0x4>

080025dc <__libc_init_array>:
 80025dc:	b570      	push	{r4, r5, r6, lr}
 80025de:	4d0d      	ldr	r5, [pc, #52]	; (8002614 <__libc_init_array+0x38>)
 80025e0:	4c0d      	ldr	r4, [pc, #52]	; (8002618 <__libc_init_array+0x3c>)
 80025e2:	1b64      	subs	r4, r4, r5
 80025e4:	10a4      	asrs	r4, r4, #2
 80025e6:	2600      	movs	r6, #0
 80025e8:	42a6      	cmp	r6, r4
 80025ea:	d109      	bne.n	8002600 <__libc_init_array+0x24>
 80025ec:	4d0b      	ldr	r5, [pc, #44]	; (800261c <__libc_init_array+0x40>)
 80025ee:	4c0c      	ldr	r4, [pc, #48]	; (8002620 <__libc_init_array+0x44>)
 80025f0:	f000 f818 	bl	8002624 <_init>
 80025f4:	1b64      	subs	r4, r4, r5
 80025f6:	10a4      	asrs	r4, r4, #2
 80025f8:	2600      	movs	r6, #0
 80025fa:	42a6      	cmp	r6, r4
 80025fc:	d105      	bne.n	800260a <__libc_init_array+0x2e>
 80025fe:	bd70      	pop	{r4, r5, r6, pc}
 8002600:	f855 3b04 	ldr.w	r3, [r5], #4
 8002604:	4798      	blx	r3
 8002606:	3601      	adds	r6, #1
 8002608:	e7ee      	b.n	80025e8 <__libc_init_array+0xc>
 800260a:	f855 3b04 	ldr.w	r3, [r5], #4
 800260e:	4798      	blx	r3
 8002610:	3601      	adds	r6, #1
 8002612:	e7f2      	b.n	80025fa <__libc_init_array+0x1e>
 8002614:	08002654 	.word	0x08002654
 8002618:	08002654 	.word	0x08002654
 800261c:	08002654 	.word	0x08002654
 8002620:	08002658 	.word	0x08002658

08002624 <_init>:
 8002624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002626:	bf00      	nop
 8002628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800262a:	bc08      	pop	{r3}
 800262c:	469e      	mov	lr, r3
 800262e:	4770      	bx	lr

08002630 <_fini>:
 8002630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002632:	bf00      	nop
 8002634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002636:	bc08      	pop	{r3}
 8002638:	469e      	mov	lr, r3
 800263a:	4770      	bx	lr
